-- • Agregar teléfono a usuario.
-- • Entrada: datos del nuevo teléfono.
-- • Usuario autorizado: admin

CREATE OR REPLACE FUNCTION FT_AGREGAR_TEL
(
  ALIASv IN TEXT
, NUMEROv IN TEXT
, DESCRIPCIONv IN TEXT
)
RETURNS INTEGER AS
$BODY$
BEGIN

    IF ((SELECT COUNT(*) FROM public."USUARIO" WHERE "ALIAS" = ALIASv) = 1) THEN
      
      INSERT INTO public."TELEFONOXUSUARIO" ("ALIASUSUARIO", "NUMERO", "DESCRIPCION")
      VALUES (ALIASv, NUMEROv, DESCRIPCIONv);

    END IF;

    RETURN (SELECT COUNT(*) AS USRs 
        FROM public."TELEFONOXUSUARIO"
        WHERE "ALIASUSUARIO" = ALIASv
        AND "NUMERO" = NUMEROv
        AND "DESCRIPCION" = DESCRIPCIONv);

END;
$BODY$
LANGUAGE 'plpgsql' VOLATILE
COST 100;

-- • Hacer login desde aplicación.
-- • Entrada: alias, password.
-- • Usuario autorizado: cualquiera.

CREATE OR REPLACE FUNCTION FT_LOGIN
(
  ALIASv IN TEXT
, PASSWORDv IN TEXT
)
RETURNS INTEGER AS
$BODY$
BEGIN

    RETURN (SELECT COUNT(*) AS USRs 
            FROM public."USUARIO" 
            WHERE "ALIAS" = ALIASv 
            AND "PASSWORD" = PASSWORDv);

END;
$BODY$
LANGUAGE 'plpgsql' VOLATILE
COST 100;

-- • Revisa si el usuario es administrador.
-- • Entrada: alias.
-- • Usuario autorizado: cualquiera.

CREATE OR REPLACE FUNCTION FT_CHECK_ADMIN
(
  ALIASv IN TEXT
)
RETURNS INTEGER AS
$BODY$
BEGIN

    RETURN (SELECT COUNT(*) AS USRs 
            FROM public."TIPOXUSUARIO" 
            WHERE "ALIASUSUARIO" = ALIASv 
            AND "DESCRIPCION" = 'ADMINISTRADOR');

END;
$BODY$
LANGUAGE 'plpgsql' VOLATILE
COST 100;

-- • Seleccionar todos los usuarios.
-- • Entrada: -
-- • Usuario autorizado: cualquiera.

CREATE OR REPLACE FUNCTION FT_SELECT_USERS()
RETURNS TABLE (ALIAS TEXT) AS
$BODY$
BEGIN
    RETURN QUERY
    SELECT "ALIAS" 
    FROM public."USUARIO";

END;
$BODY$
LANGUAGE 'plpgsql' VOLATILE
COST 100;

-- • Obtener índice de subcategoria.
-- • Entrada: IDCATEGORIAv, DESCRIPCIONSUBCATEGORIAv
-- • Usuario autorizado: participante.

CREATE OR REPLACE FUNCTION FT_GET_IND_SUBCATEGORIA
(
  IDCATEGORIAv IN INTEGER
, DESCRIPCIONSUBCATEGORIAv IN TEXT
)
RETURNS INTEGER AS
$BODY$
BEGIN

    RETURN (SELECT "ID"
            FROM public."SUBCATEGORIA"
            WHERE "IDCATEGORIA" = IDCATEGORIAv
            AND "DESCRIPCION" = DESCRIPCIONSUBCATEGORIAv);

END;
$BODY$
LANGUAGE 'plpgsql' VOLATILE
COST 100;

CREATE OR REPLACE FUNCTION FT_MODIFICAR_USUARIO
( 
  ALIASv TEXT
, NOMBREv TEXT DEFAULT NULL
, APELLIDOSv TEXT DEFAULT NULL
, DIRECCIONv TEXT DEFAULT NULL
, CEDULAv INTEGER DEFAULT NULL
, CORREOv TEXT DEFAULT NULL
, PASSWORDv TEXT DEFAULT NULL
, NUMEROv TEXT DEFAULT NULL
, DESCRIPCIONv TEXT DEFAULT 'PRINCIPAL'
)
RETURNS INTEGER AS
$BODY$
BEGIN
    IF ((SELECT COUNT(*) FROM public."USUARIO" WHERE "ALIAS" = ALIASv) = 1) THEN
      
      IF NOMBREv IS NOT NULL THEN
        UPDATE public."USUARIO" 
        SET   "NOMBRE" = NOMBREv
        WHERE "ALIAS" = ALIASv;      
      END IF;

      IF APELLIDOSv IS NOT NULL THEN
        UPDATE public."USUARIO" 
        SET   "APELLIDOS" = APELLIDOSv
        WHERE "ALIAS" = ALIASv;  
      END IF;

      IF DIRECCIONv IS NOT NULL THEN
        UPDATE public."USUARIO" 
        SET   "DIRECCION" = DIRECCIONv
        WHERE "ALIAS" = ALIASv;
      END IF;

      IF CEDULAv IS NOT NULL THEN
        UPDATE public."USUARIO" 
        SET   "CEDULA" = CEDULAv
        WHERE "ALIAS" = ALIASv;  
      END IF;

      IF CORREOv IS NOT NULL THEN
        UPDATE public."USUARIO" 
        SET   "CORREO" = CORREOv
        WHERE "ALIAS" = ALIASv;
      END IF;

      IF PASSWORDv IS NOT NULL THEN
        UPDATE public."USUARIO" 
        SET   "PASSWORD" = PASSWORDv
        WHERE "ALIAS" = ALIASv;

        EXECUTE IMMEDIATE 'ALTER USER C##_' || ALIASv || ' IDENTIFIED BY "' || PASSWORDv ||'"';
      END IF;

      IF NUMEROv IS NOT NULL THEN
        UPDATE public."TELEFONOXUSUARIO" 
        SET   "NUMERO" = NUMEROv
        WHERE "ALIASUSUARIO" = ALIASv;
      END IF;
      
      RETURN 1;
    ELSE 
        RETURN 0;
    END IF;
END;
$BODY$
LANGUAGE 'plpgsql' VOLATILE
COST 100;

-- • Lista todas las subastas ganadoras de un usuario.
-- • Entrada: alias usuario.
-- • Usuario autorizado: cualquiera

CREATE OR REPLACE FUNCTION FT_GET_SUBASTAS_GANADORAS_USUARIO
(
  ALIASv TEXT
)
RETURNS TABLE (
  ID INTEGER,
  ALIASVENDEDOR TEXT,
  PRECIOINICIAL MONEY,
  PRECIOACTUAL MONEY,
  FECHAHORAFIN DATE,
  COMENTARIOVENDEDOR TEXT) AS
$BODY$
BEGIN

    RETURN QUERY (SELECT "ID", "ALIASVENDEDOR", "PRECIOINICIAL", "PRECIOACTUAL", "FECHAHORAFIN", "COMENTARIOVENDEDOR"
            FROM public."SUBASTA" SUBASTA
            WHERE "ESTADOSUBASTA" > 1
            AND "ALIASCOMPRADOR" = ALIASv
            ORDER BY "FECHAHORAFIN" DESC);

END;
$BODY$
LANGUAGE 'plpgsql' VOLATILE
COST 100;

-- • Lista todas las subastas realizadas de un usuario.
-- • Entrada: alias usuario.
-- • Usuario autorizado: cualquiera

CREATE OR REPLACE FUNCTION FT_GET_SUBASTAS_REALIZADAS_USUARIO
(
  ALIASv TEXT
)
RETURNS TABLE (
  ID INTEGER,
  ALIASVENDEDOR TEXT,
  PRECIOINICIAL MONEY,
  PRECIOACTUAL MONEY,
  FECHAHORAFIN DATE,
  COMENTARIOVENDEDOR TEXT) AS
$BODY$
BEGIN

    RETURN QUERY (SELECT "ID", "ALIASVENDEDOR", "PRECIOINICIAL", "PRECIOACTUAL", "FECHAHORAFIN", "COMENTARIOVENDEDOR"
                    FROM public."SUBASTA"
                    WHERE "ESTADOSUBASTA" > 1
                    AND "ALIASVENDEDOR" = ALIASv
                    ORDER BY "FECHAHORAFIN" DESC);

END;
$BODY$
LANGUAGE 'plpgsql' VOLATILE
COST 100;

-- • Agregar comentario a subasta ganada por PARTICIPANTE.
-- • Entrada: COMENTARIOVENDEDORv.
-- • Usuario autorizado: PARTICIPANTE.

CREATE OR REPLACE FUNCTION FT_AGREGAR_COMENTARIO_ESTADO_VENDEDOR
(
  IDSUBASTAv INTEGER
  , COMENTARIOVENDEDORv TEXT DEFAULT NULL
  , ESTADOSUBASTAv SMALLINT DEFAULT NULL
)
RETURNS INTEGER AS
$BODY$
BEGIN
  IF COMENTARIOVENDEDORv IS NOT NULL THEN
    UPDATE public."SUBASTA"
    SET   "COMENTARIOVENDEDOR" = COMENTARIOVENDEDORv
    WHERE "ID" = IDSUBASTAv;
  END IF;

  IF ESTADOSUBASTAv IS NOT NULL THEN
    UPDATE public."SUBASTA"
    SET   "ESTADOSUBASTA" = ESTADOSUBASTAv
    WHERE "ID" = IDSUBASTAv;
  END IF;

  RETURN 1;
END;
$BODY$
LANGUAGE 'plpgsql' VOLATILE
COST 100;

-- • Agregar comentario a subasta ganada por PARTICIPANTE.
-- • Entrada: COMENTARIOCOMPRADORr, CALIFICACIONr.
-- • Usuario autorizado: PARTICIPANTE.

CREATE OR REPLACE FUNCTION FT_AGREGAR_COMENTARIO_COMPRADOR
(
    IDSUBASTAv INTEGER
  , COMENTARIOCOMPRADORv TEXT DEFAULT NULL
  , CALIFICACIONv SMALLINT DEFAULT NULL
)
RETURNS INTEGER AS
$BODY$
BEGIN
  IF COMENTARIOCOMPRADORv IS NOT NULL THEN
    UPDATE public."SUBASTA"
    SET   "COMENTARIOCOMPRADOR" = COMENTARIOCOMPRADORv
    WHERE "ID" = IDSUBASTAv;
  END IF;

  IF CALIFICACIONv IS NOT NULL THEN
    UPDATE public."SUBASTA"
    SET   "CALIFICACIONSUBASTA" = CALIFICACIONv
    WHERE "ID" = IDSUBASTAv;
  END IF;

  RETURN 1;
END;
$BODY$
LANGUAGE 'plpgsql' VOLATILE
COST 100;