CREATE OR REPLACE FUNCTION FT_CREAR_USUARIO
( 
  ALIASv TEXT
, NOMBREv TEXT
, APELLIDOSv TEXT
, DIRECCIONv TEXT
, CEDULAv INTEGER
, CORREOv TEXT
, PASSWORDv TEXT
, NUMEROv TEXT
, CALIFICACIONv SMALLINT DEFAULT 5
, DESCRIPCIONv TEXT DEFAULT 'PRINCIPAL'
, TIPOUSUARIOv TEXT DEFAULT 'PARTICIPANTE'
)
RETURNS INTEGER AS
$BODY$
BEGIN
    IF ((SELECT COUNT(*) FROM public."USUARIO" WHERE "ALIAS" = ALIASv OR "CEDULA" = CEDULAv) = 0) THEN
      INSERT INTO public."USUARIO" ("ALIAS", "NOMBRE", "APELLIDOS", "DIRECCION", "CEDULA", "CORREO", "CALIFICACION", "PASSWORD")
      VALUES (ALIASv, NOMBREv, APELLIDOSv, DIRECCIONv, CEDULAv, CORREOv, CALIFICACIONv, PASSWORDv);

      INSERT INTO public."TIPOXUSUARIO" ("ALIASUSUARIO", "DESCRIPCION")
      VALUES (ALIASv, TIPOUSUARIOv);

      INSERT INTO public."TELEFONOXUSUARIO" ("ALIASUSUARIO", "NUMERO", "DESCRIPCION")
      VALUES (ALIASv, NUMEROv, DESCRIPCIONv);
        
      EXECUTE 'CREATE USER ' || ALIASv || ' WITH PASSWORD ''' || PASSWORDv || '''';
      
      IF TIPOUSUARIOv = 'ADMINISTRADOR' THEN -- Crear administrador
        EXECUTE 'GRANT ADMINISTRADOR TO ' || ALIASv;
      ELSE -- Crear participante
        EXECUTE 'GRANT PARTICIPANTE TO ' || ALIASv;
      END IF;
      RETURN 1;
  ELSE
    RAISE NOTICE 'USER DUPLICATED';
    RETURN 0;
  END IF;
END;
$BODY$
LANGUAGE 'plpgsql' VOLATILE
COST 100;

-- • Incluir un nuevo administrador en el sistema.
-- • Entrada: datos del nuevo administrador.
-- • Usuario autorizado: admin
-- • Test: SELECT FT_CREAR_ADMIN(ALIASv := 'Hello24', NOMBREv := 'NOMBREHOLA', APELLIDOSv := 'APELLIDOSHOLA', DIRECCIONv := 'DIRECCIONHOLA', CEDULAv := 555, CORREOv := 'JOJO', PASSWORDv := 'PASS', NUMEROv => '506TEL');

CREATE OR REPLACE FUNCTION FT_CREAR_ADMIN
( 
  ALIASv TEXT
, NOMBREv TEXT
, APELLIDOSv TEXT
, DIRECCIONv TEXT
, CEDULAv INTEGER
, CORREOv TEXT
, PASSWORDv TEXT
, NUMEROv TEXT
, CALIFICACIONv SMALLINT DEFAULT 5
, DESCRIPCIONv TEXT DEFAULT 'PRINCIPAL'
)
RETURNS void AS
$BODY$
BEGIN
    IF ((SELECT COUNT(*) FROM public."USUARIO" WHERE "ALIAS" = ALIASv OR "CEDULA" = CEDULAv) = 0) THEN
      INSERT INTO public."USUARIO" ("ALIAS", "NOMBRE", "APELLIDOS", "DIRECCION", "CEDULA", "CORREO", "CALIFICACION", "PASSWORD")
      VALUES (ALIASv, NOMBREv, APELLIDOSv, DIRECCIONv, CEDULAv, CORREOv, CALIFICACIONv, PASSWORDv);

      INSERT INTO public."TIPOXUSUARIO" ("ALIASUSUARIO", "DESCRIPCION")
      VALUES (ALIASv, 'ADMINISTRADOR');

      INSERT INTO public."TELEFONOXUSUARIO" ("ALIASUSUARIO", "NUMERO", "DESCRIPCION")
      VALUES (ALIASv, NUMEROv, DESCRIPCIONv);
        
      EXECUTE 'CREATE USER ' || ALIASv || ' WITH PASSWORD ''' || PASSWORDv || '''';
      EXECUTE 'GRANT ADMINISTRADOR TO ' || ALIASv;
  ELSE
    RAISE NOTICE 'USER DUPLICATED';
    END IF;
END;
$BODY$
LANGUAGE 'plpgsql' VOLATILE
COST 100;

-- • Modifica los datos de un administrador existente.
-- • Entrada: identificador de administrador y datos del administrador.
-- • Usuario autorizado: admin
-- • Test: SELECT FT_MODIFICAR_ADMIN(ALIASv := 'Hello24', NOMBREv := 'NOMBREHOLA', APELLIDOSv := 'APELLIDOSHOLA', DIRECCIONv := 'DIRECCIONHOLA', CEDULAv := 555, CORREOv := 'JOJO', PASSWORDv := 'PASS', NUMEROv => '506TEL');
-- NO cambia nombre ALIAS.

CREATE OR REPLACE FUNCTION FT_MODIFICAR_ADMIN
( 
  ALIASv TEXT
, NOMBREv TEXT
, APELLIDOSv TEXT
, DIRECCIONv TEXT
, CEDULAv INTEGER
, CORREOv TEXT
, PASSWORDv TEXT
, NUMEROv TEXT
, CALIFICACIONv SMALLINT DEFAULT 5
, DESCRIPCIONv TEXT DEFAULT 'PRINCIPAL'
)
RETURNS void AS
$BODY$
BEGIN
    IF ((SELECT COUNT(*) FROM public."USUARIO" WHERE "ALIAS" = ALIASv) = 1) THEN
      UPDATE public."USUARIO"
      SET   "NOMBRE" = NOMBREv
          , "APELLIDOS" = APELLIDOSv
          , "DIRECCION" = DIRECCIONv
          , "CEDULA" = CEDULAv
          , "CORREO" = CORREOv
          , "CALIFICACION" = CALIFICACIONv
          , "PASSWORD" = PASSWORDv
      WHERE "ALIAS" = ALIASv;

      UPDATE public."TELEFONOXUSUARIO" 
      SET   "ALIASUSUARIO" = ALIASv
          , "NUMERO" = NUMEROv
          , "DESCRIPCION" = DESCRIPCIONv
      WHERE "ALIASUSUARIO" = ALIASv;

    END IF;
END;
$BODY$
LANGUAGE 'plpgsql' VOLATILE
COST 100;

-- • Incluir un nuevo participante en el sistema.
-- • Entrada: datos del nuevo participante.
-- • Usuario autorizado: admin
-- • EXEC SP_CREAR_PARTICIPANTE (ALIASv => 'HOLA', NOMBREv => 'NOMBREHOLA', APELLIDOSv => 'APELLIDOSHOLA', DIRECCIONv => 'DIRECCIONHOLA', CEDULAv => 5555, CORREOv => 'JOJO', PASSWORDv => 'PASS');

CREATE OR REPLACE FUNCTION FT_CREAR_PARTICIPANTE
( 
  ALIASv TEXT
, NOMBREv TEXT
, APELLIDOSv TEXT
, DIRECCIONv TEXT
, CEDULAv INTEGER
, CORREOv TEXT
, PASSWORDv TEXT
, NUMEROv TEXT
, CALIFICACIONv SMALLINT DEFAULT 5
, DESCRIPCIONv TEXT DEFAULT 'PRINCIPAL'
)
RETURNS INTEGER AS
$BODY$
BEGIN
    IF ((SELECT COUNT(*) FROM public."USUARIO" WHERE "ALIAS" = ALIASv OR "CEDULA" = CEDULAv) = 0) THEN
      INSERT INTO public."USUARIO" ("ALIAS", "NOMBRE", "APELLIDOS", "DIRECCION", "CEDULA", "CORREO", "CALIFICACION", "PASSWORD")
      VALUES (ALIASv, NOMBREv, APELLIDOSv, DIRECCIONv, CEDULAv, CORREOv, CALIFICACIONv, PASSWORDv);

      INSERT INTO public."TIPOXUSUARIO" ("ALIASUSUARIO", "DESCRIPCION")
      VALUES (ALIASv, 'PARTICIPANTE');

      INSERT INTO public."TELEFONOXUSUARIO" ("ALIASUSUARIO", "NUMERO", "DESCRIPCION")
      VALUES (ALIASv, NUMEROv, DESCRIPCIONv);
        
      EXECUTE 'CREATE USER ' || ALIASv || ' WITH PASSWORD ''' || PASSWORDv || '''';
      EXECUTE 'GRANT PARTICIPANTE TO ' || ALIASv;

      RETURN 1;
  ELSE
    RAISE NOTICE 'USER DUPLICATED';
    RETURN 0;
    END IF;
END;
$BODY$
LANGUAGE 'plpgsql' VOLATILE
COST 100;

-- • Modifica los datos de un usuario existente.
-- • Entrada: identificador de usuario y datos del usuario.
-- • Usuario autorizado: admin
-- • Test: EXEC SP_MODIFICAR_PARTICIPANTE (ALIASv => 'HOLA7', ALIASv2 => 'HOLAUPDATED', NOMBREv => 'NOMBREUPDATED', APELLIDOSv => 'APELLIDOSUPDATED', DIRECCIONv => 'DIRUPDATED', CEDULAv => 5556, CORREOv => 'JOJOUPDATED', CALIFICACIONv => 1, PASSWORDv => 'PASSUPDATED');
-- NO cambia nombre ALIAS.

CREATE OR REPLACE FUNCTION FT_MODIFICAR_PARTICIPANTE
( 
  ALIASv TEXT
, NOMBREv TEXT
, APELLIDOSv TEXT
, DIRECCIONv TEXT
, CEDULAv INTEGER
, CORREOv TEXT
, PASSWORDv TEXT
, NUMEROv TEXT
, CALIFICACIONv SMALLINT DEFAULT 5
, DESCRIPCIONv TEXT DEFAULT 'PRINCIPAL'
)
RETURNS void AS
$BODY$
BEGIN
    IF ((SELECT COUNT(*) FROM public."USUARIO" WHERE "ALIAS" = ALIASv) = 1) THEN
      UPDATE public."USUARIO"
      SET   "NOMBRE" = NOMBREv
          , "APELLIDOS" = APELLIDOSv
          , "DIRECCION" = DIRECCIONv
          , "CEDULA" = CEDULAv
          , "CORREO" = CORREOv
          , "CALIFICACION" = CALIFICACIONv
          , "PASSWORD" = PASSWORDv
      WHERE "ALIAS" = ALIASv;

      UPDATE public."TELEFONOXUSUARIO" 
      SET   "ALIASUSUARIO" = ALIASv
          , "NUMERO" = NUMEROv
          , "DESCRIPCION" = DESCRIPCIONv
      WHERE "ALIASUSUARIO" = ALIASv;

    END IF;
END;
$BODY$
LANGUAGE 'plpgsql' VOLATILE
COST 100;

-- • Incluir un nueva subasta
-- • Entrada: datos de la subasta
-- • Usuario autorizado: participante

CREATE OR REPLACE FUNCTION FT_SUBASTAR_ITEM
( 
  ALIASVENDEDORv TEXT
, MODOENTREGAv TEXT
, PRECIOINICIALv MONEY
, FECHAFINv TEXT
, HORAFINv TEXT
, COMENTARIOVENDEDORv TEXT
, DESCRIPCIONITEMv TEXT
, IDSUBCATEGORIAv INTEGER
, ESTADOSUBASTAv SMALLINT DEFAULT 1 -- 1: Subasta activa
, FOTOv TEXT DEFAULT NULL
)
RETURNS INTEGER AS
$BODY$
DECLARE
    IDITEMv INTEGER;
BEGIN
    -- Crea ítem de subasta.
    INSERT INTO public."ITEM" ("PRECIO", "DESCRIPCION", "IDSUBCATEGORIA", "FOTO")
    VALUES (PRECIOINICIALv, DESCRIPCIONITEMv, IDSUBCATEGORIAv, FOTOv);

    SELECT COUNT(*) INTO IDITEMv FROM public."ITEM";

    --Crea subasta.
    INSERT INTO public."SUBASTA" ("IDITEM", "ALIASVENDEDOR", "MODOENTREGA", "PRECIOINICIAL", "PRECIOACTUAL", "FECHAHORAFIN", "COMENTARIOVENDEDOR", "ESTADOSUBASTA")
    VALUES (IDITEMv, ALIASVENDEDORv, MODOENTREGAv, PRECIOINICIALv, PRECIOINICIALv, TO_DATE(FECHAFINv || ' ' || HORAFINv, 'yyyy/mm/dd hh24:mi:ss'), COMENTARIOVENDEDORv, ESTADOSUBASTAv);

    RETURN 1;
END;
$BODY$
LANGUAGE 'plpgsql' VOLATILE
COST 100;

-- • Lista todas las subastas activas que cumplen con las condiciones de entrada.
-- • Entrada: categoría y sub categoría.
-- • Listar resultado por tiempo restante de puja decreciente.
-- • Usuario autorizado: cualquiera
-- • Test: SELECT FT_LISTAR_SUBASTAS(SUBCATEGORIAv:=23)

CREATE OR REPLACE FUNCTION FT_LISTAR_SUBASTAS
( 
  SUBCATEGORIAv INTEGER
, CATEGORIAv INTEGER DEFAULT NULL
)
RETURNS TABLE(
  ID INTEGER,
  ALIASVENDEDOR TEXT, 
  PRECIOINICIAL MONEY, 
  PRECIOACTUAL MONEY, 
  FECHAHORAFIN DATE, 
  COMENTARIOVENDEDOR TEXT) AS
$INFO$
BEGIN
  -- No es necesario buscar la categoría, pues ya al seleccionar subcategoría la categoría enviada está asegurada.
  RETURN QUERY SELECT SUBASTA."ID", SUBASTA."ALIASVENDEDOR", SUBASTA."PRECIOINICIAL", SUBASTA."PRECIOACTUAL", SUBASTA."FECHAHORAFIN", SUBASTA."COMENTARIOVENDEDOR"
  FROM public."SUBASTA" SUBASTA
  INNER JOIN public."ITEM" ITEM
  ON ITEM."ID" = SUBASTA."IDITEM"
  WHERE ITEM."IDSUBCATEGORIA" = SUBCATEGORIAv
  AND SUBASTA."ESTADOSUBASTA" = 1 -- 1: subasta activa.
  ORDER BY SUBASTA."FECHAHORAFIN" DESC;

END;
$INFO$
LANGUAGE 'plpgsql' VOLATILE
COST 100;

-- • Para un usuario dado, listar las subastas que ha realizado.
-- • Entrada: identificador del usuario vendedor.
-- • Salida: listado cronológico de ítemes ofrecidos, precios base,
--   precios finales, comentarios de los usuarios compradores que ganaron las subastas.
-- • Usuario autorizado: cualquiera
-- • Test: SELECT FT_LISTAR_SUBASTAS_USUARIO(ALIASVENDEDORv:='cbodellb')

CREATE OR REPLACE FUNCTION FT_LISTAR_SUBASTAS_USUARIO
( 
  ALIASVENDEDORv TEXT
)
RETURNS TABLE(
  FECHAHORAFIN DATE, 
  IDITEM INTEGER, 
  PRECIOINICIAL MONEY,
  PRECIOACTUAL MONEY, 
  COMENTARIOCOMPRADOR TEXT,
  ESTADOSUBASTA SMALLINT) AS
$INFO$
DECLARE
    IDITEMv RECORD;
BEGIN
  RETURN QUERY SELECT SUBASTA."FECHAHORAFIN", SUBASTA."IDITEM", SUBASTA."PRECIOINICIAL", SUBASTA."PRECIOACTUAL", SUBASTA."COMENTARIOCOMPRADOR", SUBASTA."ESTADOSUBASTA"
  FROM public."SUBASTA" SUBASTA
  WHERE SUBASTA."ALIASVENDEDOR" = ALIASVENDEDORv
  ORDER BY SUBASTA."FECHAHORAFIN";

END;
$INFO$
LANGUAGE 'plpgsql' VOLATILE
COST 100;


------------------------------------------------
-- Listar historial de PUJA para una subasta --
-- •  Para una subasta dada, lista las pujas realizadas.
-- •  Entrada: identificador de subasta
-- •  Salida: conjunto de pujas para ese subasta por fecha y hora decreciente.

CREATE OR REPLACE FUNCTION HISTORIALPUJAS
  (IDSUBASTAv INTEGER)

RETURNS TABLE(
  ID INTEGER,
  ALIASCOMPRADOR TEXT,
  IDSUBASTA INTEGER,
  MONTO MONEY,
  FECHAHORA DATE
) AS $$

BEGIN
  RETURN QUERY SELECT "ID", "ALIASCOMPRADOR", "IDSUBASTA", "MONTO", "FECHAHORA"
  FROM public."PUJA"
  WHERE "IDSUBASTA" = IDSUBASTAv;
END;
$$ LANGUAGE plpgsql;

-- PUJAR --
-- •  Incluir una nueva puja para una subasta.
-- •  Debe cumplir con las restricciones:
-- •  el monto debe superar al de la última puja por un monto mínimo establecido por el sistema
-- •  la puja se debe hacer dentro del rango de tiempo de la subasta.
-- •  Entrada: identificador del usuario que puja, monto ofrecido

CREATE OR REPLACE FUNCTION PUJAR
  (INCREMENTOMINIMO MONEY,
  PORCENTAJEMEJORA NUMERIC,
  ALIASCOMPRADORv TEXT,
  IDSUBASTAv INTEGER,
  MONTOv MONEY)

RETURNS INTEGER AS $$

DECLARE
  PRECIOMAYOR MONEY;

BEGIN
  SELECT "PRECIOACTUAL" INTO PRECIOMAYOR
  FROM public."SUBASTA"
  WHERE "ID" = IDSUBASTAv;

  IF (MONTOv - PRECIOMAYOR) >= (GREATEST(PRECIOMAYOR*PORCENTAJEMEJORA, INCREMENTOMINIMO))  THEN
    INSERT INTO public."PUJA" ("ALIASCOMPRADOR", "IDSUBASTA", "MONTO", "FECHAHORA")
    VALUES (ALIASCOMPRADORv, IDSUBASTAv, MONTOv, CURRENT_TIMESTAMP);
  END IF;

  RETURN 1;
END;
$$ LANGUAGE plpgsql;

---------------------------------------------------------
-- Listar historial de PUJA ganadoras para un usuario --
-- •  Para un usuario dado, listar las subastas que ha ganado.
-- •  Entrada: identificador del usuario comprador.
-- •  Salida: listado cronológico de ítemes ganados, precios base, precios finales, comentarios de los usuarios vendedores.

-- Nota:
  -- Estados ESTADOSUBASTA en SUBASTA:
  --
  -- 0: sin iniciar
  -- 1: activa
  -- 2: finalizada
  -- 3: completada

CREATE OR REPLACE FUNCTION PUJASGANADORAS
  (ALIASCOMPRADORv TEXT)

RETURNS TABLE(
  IDITEM INTEGER,
  PRECIOINICIAL MONEY,
  PRECIOACTUAL MONEY,
  COMENTARIOVENDEDOR TEXT
)AS $$

BEGIN
  RETURN QUERY SELECT SUBASTA."IDITEM", SUBASTA."PRECIOINICIAL", SUBASTA."PRECIOACTUAL", SUBASTA."COMENTARIOVENDEDOR"
  FROM public."SUBASTA" SUBASTA
  WHERE ALIASCOMPRADORv = SUBASTA."ALIASCOMPRADOR" AND SUBASTA."ESTADOSUBASTA" > 1;
END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE FUNCTION FUNCIONTRIGGER() RETURNS TRIGGER AS $$

DECLARE
  PRECIOACTUALv NUMERIC;
  IDSUBASTAv NUMERIC;
  ALIASCOMPRADORv TEXT;

BEGIN
  SELECT "MONTO" INTO PRECIOACTUALv
  FROM public."PUJA" 
  WHERE "ID" = (SELECT MAX("ID") FROM public."PUJA");

  SELECT "IDSUBASTA" INTO IDSUBASTAv
  FROM public."PUJA"
  WHERE "ID" = (SELECT MAX("ID") FROM public."PUJA");

  SELECT "ALIASCOMPRADOR" INTO ALIASCOMPRADORv
  FROM public."PUJA"
  WHERE "ID" = (SELECT MAX("ID") FROM public."PUJA");

  UPDATE public."SUBASTA"
  SET "PRECIOACTUAL" = PRECIOACTUALv,
      "ALIASCOMPRADOR" = ALIASCOMPRADORv
  WHERE "ID" = IDSUBASTAv;

  RETURN NEW;
END;
$$ LANGUAGE plpgsql;


CREATE TRIGGER ACTUALIZARPRECIOACTUAL
AFTER INSERT
  ON public."PUJA"
  FOR EACH ROW
  EXECUTE PROCEDURE FUNCIONTRIGGER();


CREATE OR REPLACE FUNCTION VERIFICAFINALIZA()
RETURNS VOID AS $$
DECLARE
  i "SUBASTA"%ROWTYPE;
BEGIN
  FOR i IN (SELECT * FROM "SUBASTA" WHERE "ESTADOSUBASTA" = 1 AND "FECHAHORAFIN" < CURRENT_TIMESTAMP)
  LOOP
    UPDATE public."SUBASTA"
    SET "ESTADOSUBASTA" = 2 WHERE "ID" = I."ID";
  END LOOP;
END;
$$ LANGUAGE plpgsql;