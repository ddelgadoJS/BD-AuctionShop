CREATE OR REPLACE FUNCTION FT_CREAR_USUARIO
( 
  ALIASv TEXT
, NOMBREv TEXT
, APELLIDOSv TEXT
, DIRECCIONv TEXT
, CEDULAv INTEGER
, CORREOv TEXT
, PASSWORDv TEXT
, NUMEROv TEXT
, CALIFICACIONv SMALLINT DEFAULT 5
, DESCRIPCIONv TEXT DEFAULT 'PRINCIPAL'
, TIPOUSUARIOv TEXT DEFAULT 'PARTICIPANTE'
)
RETURNS void AS
$BODY$
BEGIN
    IF ((SELECT COUNT(*) FROM public."USUARIO" WHERE "ALIAS" = ALIASv OR "CEDULA" = CEDULAv) = 0) THEN
      INSERT INTO public."USUARIO" ("ALIAS", "NOMBRE", "APELLIDOS", "DIRECCION", "CEDULA", "CORREO", "CALIFICACION", "PASSWORD")
      VALUES (ALIASv, NOMBREv, APELLIDOSv, DIRECCIONv, CEDULAv, CORREOv, CALIFICACIONv, PASSWORDv);

      INSERT INTO public."TIPOXUSUARIO" ("ALIASUSUARIO", "DESCRIPCION")
      VALUES (ALIASv, TIPOUSUARIOv);

      INSERT INTO public."TELEFONOXUSUARIO" ("ALIASUSUARIO", "NUMERO", "DESCRIPCION")
      VALUES (ALIASv, NUMEROv, DESCRIPCIONv);
        
      EXECUTE 'CREATE USER ' || ALIASv || ' WITH PASSWORD ''' || PASSWORDv || '''';
      
      IF TIPOUSUARIOv = 'ADMINISTRADOR' THEN -- Crear administrador
        EXECUTE 'GRANT ADMINISTRADOR TO ' || ALIASv;
      ELSE -- Crear participante
        EXECUTE 'GRANT PARTICIPANTE TO ' || ALIASv;
      END IF;
  ELSE
    RAISE NOTICE 'USER DUPLICATED';
  END IF;
END;
$BODY$
LANGUAGE 'plpgsql' VOLATILE
COST 100;

-- • Incluir un nuevo administrador en el sistema.
-- • Entrada: datos del nuevo administrador.
-- • Usuario autorizado: admin
-- • Test: SELECT FT_CREAR_ADMIN(ALIASv := 'Hello24', NOMBREv := 'NOMBREHOLA', APELLIDOSv := 'APELLIDOSHOLA', DIRECCIONv := 'DIRECCIONHOLA', CEDULAv := 555, CORREOv := 'JOJO', PASSWORDv := 'PASS', NUMEROv => '506TEL');

CREATE OR REPLACE FUNCTION FT_CREAR_ADMIN
( 
  ALIASv TEXT
, NOMBREv TEXT
, APELLIDOSv TEXT
, DIRECCIONv TEXT
, CEDULAv INTEGER
, CORREOv TEXT
, PASSWORDv TEXT
, NUMEROv TEXT
, CALIFICACIONv SMALLINT DEFAULT 5
, DESCRIPCIONv TEXT DEFAULT 'PRINCIPAL'
)
RETURNS void AS
$BODY$
BEGIN
    IF ((SELECT COUNT(*) FROM public."USUARIO" WHERE "ALIAS" = ALIASv OR "CEDULA" = CEDULAv) = 0) THEN
      INSERT INTO public."USUARIO" ("ALIAS", "NOMBRE", "APELLIDOS", "DIRECCION", "CEDULA", "CORREO", "CALIFICACION", "PASSWORD")
      VALUES (ALIASv, NOMBREv, APELLIDOSv, DIRECCIONv, CEDULAv, CORREOv, CALIFICACIONv, PASSWORDv);

      INSERT INTO public."TIPOXUSUARIO" ("ALIASUSUARIO", "DESCRIPCION")
      VALUES (ALIASv, 'ADMINISTRADOR');

      INSERT INTO public."TELEFONOXUSUARIO" ("ALIASUSUARIO", "NUMERO", "DESCRIPCION")
      VALUES (ALIASv, NUMEROv, DESCRIPCIONv);
        
      EXECUTE 'CREATE USER ' || ALIASv || ' WITH PASSWORD ''' || PASSWORDv || '''';
      EXECUTE 'GRANT ADMINISTRADOR TO ' || ALIASv;
  ELSE
    RAISE NOTICE 'USER DUPLICATED';
    END IF;
END;
$BODY$
LANGUAGE 'plpgsql' VOLATILE
COST 100;

-- • Modifica los datos de un administrador existente.
-- • Entrada: identificador de administrador y datos del administrador.
-- • Usuario autorizado: admin
-- • Test: SELECT FT_MODIFICAR_ADMIN(ALIASv := 'Hello24', NOMBREv := 'NOMBREHOLA', APELLIDOSv := 'APELLIDOSHOLA', DIRECCIONv := 'DIRECCIONHOLA', CEDULAv := 555, CORREOv := 'JOJO', PASSWORDv := 'PASS', NUMEROv => '506TEL');
-- NO cambia nombre ALIAS.

CREATE OR REPLACE FUNCTION FT_MODIFICAR_ADMIN
( 
  ALIASv TEXT
, NOMBREv TEXT
, APELLIDOSv TEXT
, DIRECCIONv TEXT
, CEDULAv INTEGER
, CORREOv TEXT
, PASSWORDv TEXT
, NUMEROv TEXT
, CALIFICACIONv SMALLINT DEFAULT 5
, DESCRIPCIONv TEXT DEFAULT 'PRINCIPAL'
)
RETURNS void AS
$BODY$
BEGIN
    IF ((SELECT COUNT(*) FROM public."USUARIO" WHERE "ALIAS" = ALIASv) = 1) THEN
      UPDATE public."USUARIO"
      SET   "NOMBRE" = NOMBREv
          , "APELLIDOS" = APELLIDOSv
          , "DIRECCION" = DIRECCIONv
          , "CEDULA" = CEDULAv
          , "CORREO" = CORREOv
          , "CALIFICACION" = CALIFICACIONv
          , "PASSWORD" = PASSWORDv
      WHERE "ALIAS" = ALIASv;

      UPDATE public."TELEFONOXUSUARIO" 
      SET   "ALIASUSUARIO" = ALIASv
          , "NUMERO" = NUMEROv
          , "DESCRIPCION" = DESCRIPCIONv
      WHERE "ALIASUSUARIO" = ALIASv;

    END IF;
END;
$BODY$
LANGUAGE 'plpgsql' VOLATILE
COST 100;

-- • Incluir un nuevo participante en el sistema.
-- • Entrada: datos del nuevo participante.
-- • Usuario autorizado: admin
-- • EXEC SP_CREAR_PARTICIPANTE (ALIASv => 'HOLA', NOMBREv => 'NOMBREHOLA', APELLIDOSv => 'APELLIDOSHOLA', DIRECCIONv => 'DIRECCIONHOLA', CEDULAv => 5555, CORREOv => 'JOJO', PASSWORDv => 'PASS');

CREATE OR REPLACE FUNCTION FT_CREAR_PARTICIPANTE
( 
  ALIASv TEXT
, NOMBREv TEXT
, APELLIDOSv TEXT
, DIRECCIONv TEXT
, CEDULAv INTEGER
, CORREOv TEXT
, PASSWORDv TEXT
, NUMEROv TEXT
, CALIFICACIONv SMALLINT DEFAULT 5
, DESCRIPCIONv TEXT DEFAULT 'PRINCIPAL'
)
RETURNS void AS
$BODY$
BEGIN
    IF ((SELECT COUNT(*) FROM public."USUARIO" WHERE "ALIAS" = ALIASv OR "CEDULA" = CEDULAv) = 0) THEN
      INSERT INTO public."USUARIO" ("ALIAS", "NOMBRE", "APELLIDOS", "DIRECCION", "CEDULA", "CORREO", "CALIFICACION", "PASSWORD")
      VALUES (ALIASv, NOMBREv, APELLIDOSv, DIRECCIONv, CEDULAv, CORREOv, CALIFICACIONv, PASSWORDv);

      INSERT INTO public."TIPOXUSUARIO" ("ALIASUSUARIO", "DESCRIPCION")
      VALUES (ALIASv, 'PARTICIPANTE');

      INSERT INTO public."TELEFONOXUSUARIO" ("ALIASUSUARIO", "NUMERO", "DESCRIPCION")
      VALUES (ALIASv, NUMEROv, DESCRIPCIONv);
        
      EXECUTE 'CREATE USER ' || ALIASv || ' WITH PASSWORD ''' || PASSWORDv || '''';
      EXECUTE 'GRANT PARTICIPANTE TO ' || ALIASv;
  ELSE
    RAISE NOTICE 'USER DUPLICATED';
    END IF;
END;
$BODY$
LANGUAGE 'plpgsql' VOLATILE
COST 100;

-- • Modifica los datos de un usuario existente.
-- • Entrada: identificador de usuario y datos del usuario.
-- • Usuario autorizado: admin
-- • Test: EXEC SP_MODIFICAR_PARTICIPANTE (ALIASv => 'HOLA7', ALIASv2 => 'HOLAUPDATED', NOMBREv => 'NOMBREUPDATED', APELLIDOSv => 'APELLIDOSUPDATED', DIRECCIONv => 'DIRUPDATED', CEDULAv => 5556, CORREOv => 'JOJOUPDATED', CALIFICACIONv => 1, PASSWORDv => 'PASSUPDATED');
-- NO cambia nombre ALIAS.

CREATE OR REPLACE FUNCTION FT_MODIFICAR_PARTICIPANTE
( 
  ALIASv TEXT
, NOMBREv TEXT
, APELLIDOSv TEXT
, DIRECCIONv TEXT
, CEDULAv INTEGER
, CORREOv TEXT
, PASSWORDv TEXT
, NUMEROv TEXT
, CALIFICACIONv SMALLINT DEFAULT 5
, DESCRIPCIONv TEXT DEFAULT 'PRINCIPAL'
)
RETURNS void AS
$BODY$
BEGIN
    IF ((SELECT COUNT(*) FROM public."USUARIO" WHERE "ALIAS" = ALIASv) = 1) THEN
      UPDATE public."USUARIO"
      SET   "NOMBRE" = NOMBREv
          , "APELLIDOS" = APELLIDOSv
          , "DIRECCION" = DIRECCIONv
          , "CEDULA" = CEDULAv
          , "CORREO" = CORREOv
          , "CALIFICACION" = CALIFICACIONv
          , "PASSWORD" = PASSWORDv
      WHERE "ALIAS" = ALIASv;

      UPDATE public."TELEFONOXUSUARIO" 
      SET   "ALIASUSUARIO" = ALIASv
          , "NUMERO" = NUMEROv
          , "DESCRIPCION" = DESCRIPCIONv
      WHERE "ALIASUSUARIO" = ALIASv;

    END IF;
END;
$BODY$
LANGUAGE 'plpgsql' VOLATILE
COST 100;

-- • Incluir un nueva subasta
-- • Entrada: datos de la subasta
-- • Usuario autorizado: participante

CREATE OR REPLACE FUNCTION FT_SUBASTAR_ITEM
( 
  ALIASVENDEDORv TEXT
, MODOENTREGAv TEXT
, PRECIOINICIALv MONEY
, FECHAFINv TEXT
, HORAFINv TEXT
, COMENTARIOVENDEDORv TEXT
, DESCRIPCIONITEMv TEXT
, IDSUBCATEGORIAv INTEGER
, ESTADOSUBASTAv SMALLINT DEFAULT 1 -- 1: Subasta activa
--, FOTO
)
RETURNS void AS
$BODY$
DECLARE
    IDITEMv INTEGER;
BEGIN
    -- Crea ítem de subasta.
    INSERT INTO public."ITEM" ("PRECIO", "DESCRIPCION", "IDSUBCATEGORIA", "FOTO")
    VALUES (PRECIOINICIALv, DESCRIPCIONITEMv, IDSUBCATEGORIAv, NULL);

    SELECT COUNT(*) INTO IDITEMv FROM public."ITEM";

    --Crea subasta.
    INSERT INTO public."SUBASTA" ("IDITEM", "ALIASVENDEDOR", "MODOENTREGA", "PRECIOINICIAL", "FECHAHORAFIN", "COMENTARIOVENDEDOR", "ESTADOSUBASTA")
    VALUES (IDITEMv, ALIASVENDEDORv, MODOENTREGAv, PRECIOINICIALv, TO_DATE(FECHAFINv || ' ' || HORAFINv, 'yyyy/mm/dd hh24:mi:ss'), COMENTARIOVENDEDORv, ESTADOSUBASTAv);

END;
$BODY$
LANGUAGE 'plpgsql' VOLATILE
COST 100;

-- • Lista todas las subastas activas que cumplen con las condiciones de entrada.
-- • Entrada: categoría y sub categoría.
-- • Listar resultado por tiempo restante de puja decreciente.
-- • Usuario autorizado: cualquiera
-- • Test: SELECT FT_LISTAR_SUBASTAS(SUBCATEGORIAv:=23)

CREATE OR REPLACE FUNCTION FT_LISTAR_SUBASTAS
( 
  SUBCATEGORIAv INTEGER
, CATEGORIAv INTEGER DEFAULT NULL
)
RETURNS TABLE(
  ALIASVENDEDOR TEXT, 
  PRECIOINICIAL MONEY, 
  PRECIOACTUAL MONEY, 
  FECHAHORAFIN DATE, 
  COMENTARIOVENDEDOR TEXT) AS
$INFO$
BEGIN
  -- No es necesario buscar la categoría, pues ya al seleccionar subcategoría la categoría enviada está asegurada.
  RETURN QUERY SELECT SUBASTA."ALIASVENDEDOR", SUBASTA."PRECIOINICIAL", SUBASTA."PRECIOACTUAL", SUBASTA."FECHAHORAFIN", SUBASTA."COMENTARIOVENDEDOR"
  FROM public."SUBASTA" SUBASTA
  INNER JOIN public."ITEM" ITEM
  ON ITEM."ID" = SUBASTA."IDITEM"
  WHERE ITEM."IDSUBCATEGORIA" = SUBCATEGORIAv
  AND SUBASTA."ESTADOSUBASTA" = 1 -- 1: subasta activa.
  ORDER BY SUBASTA."FECHAHORAFIN" DESC;

END;
$INFO$
LANGUAGE 'plpgsql' VOLATILE
COST 100;

-- • Para un usuario dado, listar las subastas que ha realizado.
-- • Entrada: identificador del usuario vendedor.
-- • Salida: listado cronológico de ítemes ofrecidos, precios base,
--   precios finales, comentarios de los usuarios compradores que ganaron las subastas.
-- • Usuario autorizado: cualquiera
-- • Test: SELECT FT_LISTAR_SUBASTAS_USUARIO(ALIASVENDEDORv:='cbodellb')

CREATE OR REPLACE FUNCTION FT_LISTAR_SUBASTAS_USUARIO
( 
  ALIASVENDEDORv TEXT
)
RETURNS TABLE(
  FECHAHORAFIN DATE, 
  IDITEM INTEGER, 
  PRECIOINICIAL MONEY,
  PRECIOACTUAL MONEY, 
  COMENTARIOCOMPRADOR TEXT,
  ESTADOSUBASTA SMALLINT) AS
$INFO$
DECLARE
    IDITEMv RECORD;
BEGIN
  RETURN QUERY SELECT SUBASTA."FECHAHORAFIN", SUBASTA."IDITEM", SUBASTA."PRECIOINICIAL", SUBASTA."PRECIOACTUAL", SUBASTA."COMENTARIOCOMPRADOR", SUBASTA."ESTADOSUBASTA"
  FROM public."SUBASTA" SUBASTA
  WHERE SUBASTA."ALIASVENDEDOR" = ALIASVENDEDORv
  ORDER BY SUBASTA."FECHAHORAFIN";

END;
$INFO$
LANGUAGE 'plpgsql' VOLATILE
COST 100;