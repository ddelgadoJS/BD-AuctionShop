-- • Incluir un nuevo administrador en el sistema.
-- • Entrada: datos del nuevo administrador.
-- • Usuario autorizado: admin
-- • Test: EXEC SP_CREAR_ADMIN (ALIASv => 'HOLA', NOMBREv => 'NOMBREHOLA', APELLIDOSv => 'APELLIDOSHOLA', DIRECCIONv => 'DIRECCIONHOLA', CEDULAv => 5555, CORREOv => 'JOJO', PASSWORDv => 'PASS');

CREATE OR REPLACE PROCEDURE SP_CREAR_USUARIO
(
  ALIASv IN VARCHAR2
, NOMBREv IN NVARCHAR2
, APELLIDOSv IN NVARCHAR2
, DIRECCIONv IN NVARCHAR2
, CEDULAv IN INTEGER
, CORREOv IN VARCHAR2
, CALIFICACIONv IN SMALLINT DEFAULT 5
, PASSWORDv IN VARCHAR2
, NUMEROv IN VARCHAR2
, DESCRIPCIONv IN NVARCHAR2 DEFAULT 'PRINCIPAL'
, TIPOUSUARIOv IN NVARCHAR2 DEFAULT 'PARTICIPANTE'
)
IS 
-- Variable para saber si ya se encuentra registrado el usuario.
-- Si es 0, no existe el alias.
VAL SMALLINT;

BEGIN
    SELECT COUNT(*) INTO VAL
    FROM SYS.USUARIO
    WHERE SYS.USUARIO.ALIAS = ALIASv
    OR SYS.USUARIO.CEDULA = CEDULAv;

    IF VAL = 0 THEN
      IF TIPOUSUARIOv = 'ADMINISTRADOR' THEN -- Crear administrador
        INSERT INTO SYS.USUARIO (ALIAS, NOMBRE, APELLIDOS, DIRECCION, CEDULA, CORREO, CALIFICACION, PASSWORD)
        VALUES (ALIASv, NOMBREv, APELLIDOSv, DIRECCIONv, CEDULAv, CORREOv, CALIFICACIONv, PASSWORDv);

        INSERT INTO SYS.TIPOXUSUARIO (ALIASUSUARIO, DESCRIPCION)
        VALUES (ALIASv, TIPOUSUARIOv);

        INSERT INTO SYS.TELEFONOXUSUARIO (ALIASUSUARIO, NUMERO, DESCRIPCION)
        VALUES (ALIASv, NUMEROv, DESCRIPCIONv);
      
        EXECUTE IMMEDIATE 'CREATE USER C##_' || ALIASv || ' IDENTIFIED BY "' || PASSWORDv ||'"';
        EXECUTE IMMEDIATE 'GRANT CONNECT, RESOURCE, DBA TO C##_' || ALIASv;
        EXECUTE IMMEDIATE 'GRANT CREATE SESSION TO C##_' || ALIASv;
        EXECUTE IMMEDIATE 'GRANT UNLIMITED TABLESPACE TO C##_' || ALIASv;
        EXECUTE IMMEDIATE 'GRANT SELECT, INSERT, UPDATE, DELETE ON SYS.USUARIO TO C##_' || ALIASv;
      
      ELSE -- Crear participante
        INSERT INTO SYS.USUARIO (ALIAS, NOMBRE, APELLIDOS, DIRECCION, CEDULA, CORREO, CALIFICACION, PASSWORD)
        VALUES (ALIASv, NOMBREv, APELLIDOSv, DIRECCIONv, CEDULAv, CORREOv, CALIFICACIONv, PASSWORDv);
      
        INSERT INTO SYS.TIPOXUSUARIO (ALIASUSUARIO, DESCRIPCION)
        VALUES (ALIASv, TIPOUSUARIOv);

        INSERT INTO SYS.TELEFONOXUSUARIO (ALIASUSUARIO, NUMERO, DESCRIPCION)
        VALUES (ALIASv, NUMEROv, DESCRIPCIONv);
      
        EXECUTE IMMEDIATE 'CREATE USER C##_' || ALIASv || ' IDENTIFIED BY "' || PASSWORDv ||'"';
        EXECUTE IMMEDIATE 'GRANT CONNECT, RESOURCE TO C##_' || ALIASv;
        EXECUTE IMMEDIATE 'GRANT CREATE SESSION TO C##_' || ALIASv;
        EXECUTE IMMEDIATE 'GRANT UNLIMITED TABLESPACE TO C##_' || ALIASv;
        EXECUTE IMMEDIATE 'GRANT SELECT, INSERT, UPDATE, DELETE ON SYS.USUARIO TO C##_' || ALIASv;
        EXECUTE IMMEDIATE 'GRANT SELECT ON SYS.CATEGORIA TO C##_' || ALIASv;
        EXECUTE IMMEDIATE 'GRANT SELECT ON SYS.SUBCATEGORIA TO C##_' || ALIASv;
        EXECUTE IMMEDIATE 'GRANT SELECT, INSERT, UPDATE, DELETE ON SYS.PUJA TO C##_' || ALIASv;
      END IF;
    END IF;
    
    COMMIT;
END;
/

-- • Modifica los datos de un administrador existente.
-- • Entrada: identificador de administrador y datos del administrador.
-- • Usuario autorizado: admin
-- • Test: EXEC SP_MODIFICAR_ADMIN (ALIASv => 'HOLA7', ALIASv2 => 'HOLAUPDATED', NOMBREv => 'NOMBREUPDATED', APELLIDOSv => 'APELLIDOSUPDATED', DIRECCIONv => 'DIRUPDATED', CEDULAv => 5556, CORREOv => 'JOJOUPDATED', CALIFICACIONv => 1, PASSWORDv => 'PASSUPDATED');

CREATE OR REPLACE PROCEDURE SP_MODIFICAR_ADMIN
(
  ALIASv IN VARCHAR2 -- Alias actual.
, ALIASv2 IN VARCHAR2 -- Alias nuevo.
, NOMBREv IN NVARCHAR2
, APELLIDOSv IN NVARCHAR2
, DIRECCIONv IN NVARCHAR2
, CEDULAv IN INTEGER
, CORREOv IN VARCHAR2
, CALIFICACIONv IN SMALLINT
, PASSWORDv IN VARCHAR2
, NUMEROv IN VARCHAR2
, DESCRIPCIONv IN NVARCHAR2 DEFAULT 'PRINCIPAL'
)
IS 
-- Variable para saber si ya se encuentra registrado el usuario.
-- Si es 0, no existe el alias.
VAL SMALLINT;

BEGIN
    SELECT COUNT(*) INTO VAL
    FROM SYS.USUARIO
    WHERE SYS.USUARIO.ALIAS = ALIASv;

    IF VAL = 1 THEN
      UPDATE SYS.USUARIO 
      SET   ALIAS = ALIASv2
          , NOMBRE = NOMBREv
          , APELLIDOS = APELLIDOSv
          , DIRECCION = DIRECCIONv
          , CEDULA = CEDULAv
          , CORREO = CORREOv
          , CALIFICACION = CALIFICACIONv
          , PASSWORD = PASSWORDv
      WHERE ALIAS = ALIASv;

      UPDATE SYS.TIPOXUSUARIO
      SET   ALIASUSUARIO = ALIASv2
      WHERE ALIASUSUARIO = ALIASv;

      UPDATE SYS.TELEFONOXUSUARIO 
      SET   ALIASUSUARIO = ALIASv2
          , NUMERO = NUMEROv
          , DESCRIPCION = DESCRIPCIONv
      WHERE ALIAS = ALIASv;

      -- If new alias create new user
      IF ALIASv = ALIASv2 THEN
        EXECUTE IMMEDIATE 'ALTER USER C##_' || ALIASv || ' IDENTIFIED BY "' || PASSWORDv ||'"';
      ELSE
        -- Drop old user.
        EXECUTE IMMEDIATE 'DROP USER C##_' || ALIASv;

        -- Create new user.
        EXECUTE IMMEDIATE 'CREATE USER C##_' || ALIASv2 || ' IDENTIFIED BY "' || PASSWORDv ||'"';
        EXECUTE IMMEDIATE 'GRANT CONNECT, RESOURCE, DBA TO C##_' || ALIASv2;
        EXECUTE IMMEDIATE 'GRANT CREATE SESSION TO C##_' || ALIASv2;
        EXECUTE IMMEDIATE 'GRANT UNLIMITED TABLESPACE TO C##_' || ALIASv2;
        EXECUTE IMMEDIATE 'GRANT SELECT, INSERT, UPDATE, DELETE ON SYS.USUARIO TO C##_' || ALIASv2;
      END IF;

    END IF;
    
    COMMIT;
END;
/

-- • Incluir un nuevo participante en el sistema.
-- • Entrada: datos del nuevo participante.
-- • Usuario autorizado: admin
-- • EXEC SP_CREAR_PARTICIPANTE (ALIASv => 'HOLA', NOMBREv => 'NOMBREHOLA', APELLIDOSv => 'APELLIDOSHOLA', DIRECCIONv => 'DIRECCIONHOLA', CEDULAv => 5555, CORREOv => 'JOJO', PASSWORDv => 'PASS');

CREATE OR REPLACE PROCEDURE SP_CREAR_PARTICIPANTE
(
  ALIASv IN VARCHAR2
, NOMBREv IN NVARCHAR2
, APELLIDOSv IN NVARCHAR2
, DIRECCIONv IN NVARCHAR2
, CEDULAv IN INTEGER
, CORREOv IN VARCHAR2
, CALIFICACIONv IN SMALLINT DEFAULT 5
, PASSWORDv IN VARCHAR2
, NUMEROv IN VARCHAR2
, DESCRIPCIONv IN NVARCHAR2 DEFAULT 'PRINCIPAL'
)
IS 
-- Variable para saber si ya se encuentra registrado el usuario.
-- Si es 0, no existe el alias.
VAL SMALLINT;

BEGIN
    SELECT COUNT(*) INTO VAL
    FROM SYS.USUARIO
    WHERE SYS.USUARIO.ALIAS = ALIASv
    OR SYS.USUARIO.CEDULA = CEDULAv;

    IF VAL = 0 THEN
      INSERT INTO SYS.USUARIO (ALIAS, NOMBRE, APELLIDOS, DIRECCION, CEDULA, CORREO, CALIFICACION, PASSWORD)
      VALUES (ALIASv, NOMBREv, APELLIDOSv, DIRECCIONv, CEDULAv, CORREOv, CALIFICACIONv, PASSWORDv);
    
      INSERT INTO SYS.TIPOXUSUARIO (ALIASUSUARIO, DESCRIPCION)
      VALUES (ALIASUSUARIOv, 'PARTICIPANTE');

      INSERT INTO SYS.TELEFONOXUSUARIO (ALIASUSUARIO, NUMERO, DESCRIPCION)
      VALUES (ALIASUSUARIOv, NUMEROv, DESCRIPCIONv);
    
      EXECUTE IMMEDIATE 'CREATE USER C##_' || ALIASv || ' IDENTIFIED BY "' || PASSWORDv ||'"';
      EXECUTE IMMEDIATE 'GRANT CONNECT, RESOURCE TO C##_' || ALIASv;
      EXECUTE IMMEDIATE 'GRANT CREATE SESSION TO C##_' || ALIASv;
      EXECUTE IMMEDIATE 'GRANT UNLIMITED TABLESPACE TO C##_' || ALIASv;
      EXECUTE IMMEDIATE 'GRANT SELECT, INSERT, UPDATE, DELETE ON SYS.USUARIO TO C##_' || ALIASv;
      EXECUTE IMMEDIATE 'GRANT SELECT ON SYS.CATEGORIA TO C##_' || ALIASv;
      EXECUTE IMMEDIATE 'GRANT SELECT ON SYS.SUBCATEGORIA TO C##_' || ALIASv;
      EXECUTE IMMEDIATE 'GRANT SELECT, INSERT, UPDATE, DELETE ON SYS.PUJA TO C##_' || ALIASv;

    END IF;
    
    COMMIT;
END;
/

-- • Modifica los datos de un usuario existente.
-- • Entrada: identificador de usuario y datos del usuario.
-- • Usuario autorizado: admin
-- • Test: EXEC SP_MODIFICAR_PARTICIPANTE (ALIASv => 'HOLA7', ALIASv2 => 'HOLAUPDATED', NOMBREv => 'NOMBREUPDATED', APELLIDOSv => 'APELLIDOSUPDATED', DIRECCIONv => 'DIRUPDATED', CEDULAv => 5556, CORREOv => 'JOJOUPDATED', CALIFICACIONv => 1, PASSWORDv => 'PASSUPDATED');

CREATE OR REPLACE PROCEDURE SP_MODIFICAR_PARTICIPANTE
(
  ALIASv IN VARCHAR2 -- Alias actual.
, ALIASv2 IN VARCHAR2 -- Alias nuevo.
, NOMBREv IN NVARCHAR2
, APELLIDOSv IN NVARCHAR2
, DIRECCIONv IN NVARCHAR2
, CEDULAv IN INTEGER
, CORREOv IN VARCHAR2
, CALIFICACIONv IN SMALLINT
, PASSWORDv IN VARCHAR2
, NUMEROv IN VARCHAR2
, DESCRIPCIONv IN NVARCHAR2 DEFAULT 'PRINCIPAL'
)
IS 
-- Variable para saber si ya se encuentra registrado el usuario.
-- Si es 0, no existe el alias.
VAL SMALLINT;

BEGIN
    SELECT COUNT(*) INTO VAL
    FROM SYS.USUARIO
    WHERE SYS.USUARIO.ALIAS = ALIASv;

    IF VAL = 1 THEN
      UPDATE SYS.USUARIO 
      SET   SYS.USUARIO.ALIAS = ALIASv2
          , NOMBRE = NOMBREv
          , APELLIDOS = APELLIDOSv
          , DIRECCION = DIRECCIONv
          , CEDULA = CEDULAv
          , CORREO = CORREOv
          , CALIFICACION = CALIFICACIONv
          , PASSWORD = PASSWORDv
      WHERE ALIAS = ALIASv;

      UPDATE SYS.TIPOXUSUARIO
      SET   ALIASUSUARIO = ALIASv2
      WHERE ALIASUSUARIO = ALIASv;

      UPDATE SYS.TELEFONOXUSUARIO 
      SET   ALIASUSUARIO = ALIASv2
          , NUMERO = NUMEROv
          , DESCRIPCION = DESCRIPCIONv
      WHERE ALIAS = ALIASv;

      -- If new alias create new user
      IF ALIASv = ALIASv2 THEN
        EXECUTE IMMEDIATE 'ALTER USER C##_' || ALIASv || ' IDENTIFIED BY "' || PASSWORDv ||'"';
      ELSE
        -- Drop old user.
        EXECUTE IMMEDIATE 'DROP USER C##_' || ALIASv;

        -- Create new user.
        EXECUTE IMMEDIATE 'CREATE USER C##_' || ALIASv || ' IDENTIFIED BY "' || PASSWORDv ||'"';
        EXECUTE IMMEDIATE 'GRANT CONNECT, RESOURCE TO C##_' || ALIASv;
        EXECUTE IMMEDIATE 'GRANT CREATE SESSION TO C##_' || ALIASv;
        EXECUTE IMMEDIATE 'GRANT UNLIMITED TABLESPACE TO C##_' || ALIASv;
        EXECUTE IMMEDIATE 'GRANT SELECT, INSERT, UPDATE, DELETE ON SYS.USUARIO TO C##_' || ALIASv;
        EXECUTE IMMEDIATE 'GRANT SELECT ON SYS.CATEGORIA TO C##_' || ALIASv;
        EXECUTE IMMEDIATE 'GRANT SELECT ON SYS.SUBCATEGORIA TO C##_' || ALIASv;
        EXECUTE IMMEDIATE 'GRANT SELECT, INSERT, UPDATE, DELETE ON SYS.PUJA TO C##_' || ALIASv;
      END IF;

    END IF;
    
    COMMIT;
END;
/

-- • Incluir un nueva subasta
-- • Entrada: datos de la subasta
-- • Usuario autorizado: participante
-- • Test: EXEC SP_SUBASTAR_ITEM (ALIASv => 'HOLA7', ALIASv2 => 'HOLAUPDATED', NOMBREv => 'NOMBREUPDATED', APELLIDOSv => 'APELLIDOSUPDATED', DIRECCIONv => 'DIRUPDATED', CEDULAv => 5556, CORREOv => 'JOJOUPDATED', CALIFICACIONv => 1, PASSWORDv => 'PASSUPDATED');

CREATE OR REPLACE PROCEDURE SP_SUBASTAR_ITEM --INCOMPLETED
(
  ALIASv IN VARCHAR2
, NOMBREv IN NVARCHAR2
, APELLIDOSv IN NVARCHAR2
, DIRECCIONv IN NVARCHAR2
, CEDULAv IN INTEGER
, CORREOv IN VARCHAR2
, CALIFICACIONv IN SMALLINT
, PASSWORDv IN VARCHAR2
, NUMEROv IN VARCHAR2
, DESCRIPCIONv IN NVARCHAR2 DEFAULT 'PRINCIPAL'
)
IS 
-- Variable para saber si ya se encuentra registrado el usuario.
-- Si es 0, no existe el alias.
VAL SMALLINT;

BEGIN
    SELECT COUNT(*) INTO VAL
    FROM SYS.USUARIO USUARIO
    WHERE USUARIO.ALIAS = ALIASv;

    IF VAL = 1 THEN
      UPDATE SYS.USUARIO 
      SET   ALIAS = ALIASv2
          , NOMBRE = NOMBREv
          , APELLIDOS = APELLIDOSv
          , DIRECCION = DIRECCIONv
          , CEDULA = CEDULAv
          , CORREO = CORREOv
          , CALIFICACION = CALIFICACIONv
          , PASSWORD = PASSWORDv
      WHERE ALIAS = ALIASv;

      UPDATE SYS.TIPOXUSUARIO
      SET   ALIASUSUARIO = ALIASv2
      WHERE ALIASUSUARIO = ALIASv;

      UPDATE SYS.TELEFONOXUSUARIO 
      SET   ALIASUSUARIO = ALIASv2
          , NUMERO = NUMEROv
          , DESCRIPCION = DESCRIPCIONv
      WHERE ALIAS = ALIASv;

      -- If new alias create new user
      IF ALIASv = ALIASv2 THEN
        EXECUTE IMMEDIATE 'ALTER USER C##_' || ALIASv || ' IDENTIFIED BY "' || PASSWORDv ||'"';
      ELSE
        -- Drop old user.
        EXECUTE IMMEDIATE 'DROP USER C##_' || ALIASv;

        -- Create new user.
        EXECUTE IMMEDIATE 'CREATE USER C##_' || ALIASv || ' IDENTIFIED BY "' || PASSWORDv ||'"';
        EXECUTE IMMEDIATE 'GRANT CONNECT, RESOURCE TO C##_' || ALIASv;
        EXECUTE IMMEDIATE 'GRANT CREATE SESSION TO C##_' || ALIASv;
        EXECUTE IMMEDIATE 'GRANT UNLIMITED TABLESPACE TO C##_' || ALIASv;
        EXECUTE IMMEDIATE 'GRANT SELECT, INSERT, UPDATE, DELETE ON SYS.USUARIO TO C##_' || ALIASv;
        EXECUTE IMMEDIATE 'GRANT SELECT ON SYS.CATEGORIA TO C##_' || ALIASv;
        EXECUTE IMMEDIATE 'GRANT SELECT ON SYS.SUBCATEGORIA TO C##_' || ALIASv;
        EXECUTE IMMEDIATE 'GRANT SELECT, INSERT, UPDATE, DELETE ON SYS.PUJA TO C##_' || ALIASv;
      END IF;

    END IF;
    
    COMMIT;
END;
/

-- • Lista todas las subastas activas que cumplen con las condiciones de entrada.
-- • Entrada: categoría y sub categoría.
-- • Listar resultado por tiempo restante de puja decreciente.
-- • Usuario autorizado: cualquiera
-- • Test: 

CREATE OR REPLACE PROCEDURE SP_LISTAR_SUBASTAS
(
  CATEGORIAv IN NUMBER DEFAULT NULL
, SUBCATEGORIAv IN NUMBER
)
IS
BEGIN
  -- No es necesario buscar la categoría, pues ya al seleccionar subcategoría la categoría enviada está asegurada.
  DECLARE 
  CURSOR CSUBASTA IS 
    SELECT SUBASTA.ALIASVENDEDOR, SUBASTA.PRECIOINICIAL, SUBASTA.PRECIOACTUAL, SUBASTA.FECHAHORAFIN, SUBASTA.COMENTARIOVENDEDOR
    FROM SYS.SUBASTA SUBASTA
    INNER JOIN SYS.ITEM ITEM
    ON ITEM.ID = SUBASTA.IDITEM
    WHERE ITEM.IDSUBCATEGORIA = SUBCATEGORIAv
    AND SUBASTA.ESTADOSUBASTA = 1 -- 1: subasta activa.
    ORDER BY SUBASTA.FECHAHORAFIN DESC;

  ALIASVENDEDORr SYS.SUBASTA.ALIASVENDEDOR%TYPE;
  PRECIOINICIALr SYS.SUBASTA.PRECIOINICIAL%TYPE;
  PRECIOACTUALr SYS.SUBASTA.PRECIOACTUAL%TYPE;
  FECHAHORAFINr SYS.SUBASTA.FECHAHORAFIN%TYPE;
  COMENTARIOVENDEDORr SYS.SUBASTA.COMENTARIOVENDEDOR%TYPE;

  BEGIN
    OPEN CSUBASTA;
      LOOP
        FETCH CSUBASTA INTO ALIASVENDEDORr, PRECIOINICIALr, PRECIOACTUALr, FECHAHORAFINr, COMENTARIOVENDEDORr;
        EXIT WHEN CSUBASTA%NOTFOUND;
        --DBMS_OUTPUT.PUT_LINE(ALIASVENDEDORr || ', ' || FECHAHORAFINr);
      END LOOP;
    CLOSE CSUBASTA;
  END;
END;
/

-- • Para un usuario dado, listar las subastas que ha realizado.
-- • Entrada: identificador del usuario vendedor.
-- • Salida: listado cronológico de ítemes ofrecidos, precios base,
--   precios finales, comentarios de los usuarios compradores que ganaron las subastas.
-- • Usuario autorizado: cualquiera
-- • Test: EXEC SP_CREAR_ADMIN (ALIASv => 'HOLA', NOMBREv => 'NOMBREHOLA', APELLIDOSv => 'APELLIDOSHOLA', DIRECCIONv => 'DIRECCIONHOLA', CEDULAv => 5555, CORREOv => 'JOJO', PASSWORDv => 'PASS');

CREATE OR REPLACE PROCEDURE SP_LISTAR_SUBASTAS_USUARIO
(
  ALIASVENDEDORr IN VARCHAR2
)
IS
BEGIN
  DECLARE 
  CURSOR CSUBASTA IS 
    SELECT SUBASTA.FECHAHORAFIN, SUBASTA.IDITEM, SUBASTA.PRECIOINICIAL, SUBASTA.PRECIOACTUAL, SUBASTA.COMENTARIOCOMPRADOR, SUBASTA.ESTADOSUBASTA
    FROM SYS.SUBASTA SUBASTA
    WHERE SUBASTA.ALIASVENDEDOR = ALIASVENDEDORr
    ORDER BY SUBASTA.FECHAHORAFIN;

  FECHAHORAFINr SYS.SUBASTA.FECHAHORAFIN%TYPE;
  IDITEMr SYS.SUBASTA.IDITEM%TYPE;
  PRECIOINICIALr SYS.SUBASTA.PRECIOINICIAL%TYPE;
  PRECIOACTUALr SYS.SUBASTA.PRECIOACTUAL%TYPE;
  COMENTARIOCOMPRADORr SYS.SUBASTA.COMENTARIOCOMPRADOR%TYPE;
  ESTADOSUBASTAr SYS.SUBASTA.ESTADOSUBASTA%TYPE;

  BEGIN
    OPEN CSUBASTA;
      LOOP
        FETCH CSUBASTA INTO FECHAHORAFINr, IDITEMr, PRECIOINICIALr, PRECIOACTUALr, COMENTARIOCOMPRADORr, ESTADOSUBASTAr;
        EXIT WHEN CSUBASTA%NOTFOUND;
        --DBMS_OUTPUT.PUT_LINE(ALIASVENDEDORr || ', ' || FECHAHORAFINr);
      END LOOP;
    CLOSE CSUBASTA;
  END;
END;
/