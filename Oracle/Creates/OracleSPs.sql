-- AGREGAR A TODAS LAS REFERENCIAS A TABLAS EL USUARIO AL INICIO.
-- USUARIO: C##_USR_ADMIN.CATEGORIA
-- EJEMPLO: C##_USR_ADMIN.CATEGORIA

-- • Incluir un nuevo usuario (administrador o participante) en el sistema.
-- • Entrada: datos del nuevo usuario.
-- • Usuario autorizado: admin

CREATE OR REPLACE PROCEDURE SP_CREAR_USUARIO
(
  ALIASv IN VARCHAR2
, NOMBREv IN NVARCHAR2
, APELLIDOSv IN NVARCHAR2
, DIRECCIONv IN NVARCHAR2
, CEDULAv IN INTEGER
, CORREOv IN VARCHAR2
, CALIFICACIONv IN SMALLINT DEFAULT 5
, PASSWORDv IN VARCHAR2
, NUMEROv IN VARCHAR2
, DESCRIPCIONv IN NVARCHAR2 DEFAULT 'PRINCIPAL'
, TIPOUSUARIOv IN NVARCHAR2 DEFAULT 'PARTICIPANTE'
)
IS 
-- Variable para saber si ya se encuentra registrado el usuario.
-- Si es 0, no existe el alias.
VAL SMALLINT;

BEGIN
    SELECT COUNT(*) INTO VAL
    FROM SYS.USUARIO
    WHERE SYS.USUARIO.ALIAS = ALIASv
    OR SYS.USUARIO.CEDULA = CEDULAv;

    IF VAL = 0 THEN
      INSERT INTO SYS.USUARIO (ALIAS, NOMBRE, APELLIDOS, DIRECCION, CEDULA, CORREO, CALIFICACION, PASSWORD)
      VALUES (ALIASv, NOMBREv, APELLIDOSv, DIRECCIONv, CEDULAv, CORREOv, CALIFICACIONv, PASSWORDv);
    
      INSERT INTO SYS.TIPOXUSUARIO (ALIASUSUARIO, DESCRIPCION)
      VALUES (ALIASv, TIPOUSUARIOv);

      INSERT INTO SYS.TELEFONOXUSUARIO (ALIASUSUARIO, NUMERO, DESCRIPCION)
      VALUES (ALIASv, NUMEROv, DESCRIPCIONv);
    
      EXECUTE IMMEDIATE 'CREATE USER C##_' || ALIASv || ' IDENTIFIED BY "' || PASSWORDv ||'"';
      
      IF TIPOUSUARIOv = 'ADMINISTRADOR' THEN -- Crear administrador
        EXECUTE IMMEDIATE 'GRANT CONNECT, RESOURCE, DBA TO C##_' || ALIASv;
        EXECUTE IMMEDIATE 'GRANT CREATE SESSION TO C##_' || ALIASv;
        EXECUTE IMMEDIATE 'GRANT UNLIMITED TABLESPACE TO C##_' || ALIASv;
        EXECUTE IMMEDIATE 'GRANT SELECT, INSERT, UPDATE, DELETE ON SYS.USUARIO TO C##_' || ALIASv;
      
      ELSE -- Crear participante
        EXECUTE IMMEDIATE 'GRANT CONNECT, RESOURCE TO C##_' || ALIASv;
        EXECUTE IMMEDIATE 'GRANT CREATE SESSION TO C##_' || ALIASv;
        EXECUTE IMMEDIATE 'GRANT UNLIMITED TABLESPACE TO C##_' || ALIASv;
        EXECUTE IMMEDIATE 'GRANT SELECT, INSERT, UPDATE, DELETE ON SYS.USUARIO TO C##_' || ALIASv;
        EXECUTE IMMEDIATE 'GRANT SELECT ON SYS.CATEGORIA TO C##_' || ALIASv;
        EXECUTE IMMEDIATE 'GRANT SELECT ON SYS.SUBCATEGORIA TO C##_' || ALIASv;
        EXECUTE IMMEDIATE 'GRANT SELECT, INSERT, UPDATE, DELETE ON SYS.PUJA TO C##_' || ALIASv;
      END IF;

      COMMIT;
      DBMS_OUTPUT.PUT_LINE('1');  -- Usuario creado.
    ELSE
      DBMS_OUTPUT.PUT_LINE('0'); -- Alias o cédula duplicadas.
    END IF;

    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
END;
/

-- • Incluir un nuevo administrador en el sistema.
-- • Entrada: datos del nuevo administrador.
-- • Usuario autorizado: admin
-- • Test: EXEC SP_CREAR_ADMIN (ALIASv => 'HOLA', NOMBREv => 'NOMBREHOLA', APELLIDOSv => 'APELLIDOSHOLA', DIRECCIONv => 'DIRECCIONHOLA', CEDULAv => 5555, CORREOv => 'JOJO', PASSWORDv => 'PASS');

CREATE OR REPLACE PROCEDURE SP_CREAR_ADMIN
(
  ALIASv IN VARCHAR2
, NOMBREv IN NVARCHAR2
, APELLIDOSv IN NVARCHAR2
, DIRECCIONv IN NVARCHAR2
, CEDULAv IN INTEGER
, CORREOv IN VARCHAR2
, CALIFICACIONv IN SMALLINT DEFAULT 5
, PASSWORDv IN VARCHAR2
, NUMEROv IN VARCHAR2
, DESCRIPCIONv IN NVARCHAR2 DEFAULT 'PRINCIPAL'
)
IS 
-- Variable para saber si ya se encuentra registrado el usuario.
-- Si es 0, no existe el alias.
VAL SMALLINT;

BEGIN
    SELECT COUNT(*) INTO VAL
    FROM SYS.USUARIO
    WHERE SYS.USUARIO.ALIAS = ALIASv
    OR SYS.USUARIO.CEDULA = CEDULAv;

    IF VAL = 0 THEN
      INSERT INTO SYS.USUARIO (ALIAS, NOMBRE, APELLIDOS, DIRECCION, CEDULA, CORREO, CALIFICACION, PASSWORD)
      VALUES (ALIASv, NOMBREv, APELLIDOSv, DIRECCIONv, CEDULAv, CORREOv, CALIFICACIONv, PASSWORDv);

      INSERT INTO SYS.TIPOXUSUARIO (ALIASUSUARIO, DESCRIPCION)
      VALUES (ALIASv, 'ADMINISTRADOR');

      INSERT INTO SYS.TELEFONOXUSUARIO (ALIASUSUARIO, NUMERO, DESCRIPCION)
      VALUES (ALIASv, NUMEROv, DESCRIPCIONv);
    
      EXECUTE IMMEDIATE 'CREATE USER C##_' || ALIASv || ' IDENTIFIED BY "' || PASSWORDv ||'"';
      EXECUTE IMMEDIATE 'GRANT CONNECT, RESOURCE, DBA TO C##_' || ALIASv;
      EXECUTE IMMEDIATE 'GRANT CREATE SESSION TO C##_' || ALIASv;
      EXECUTE IMMEDIATE 'GRANT UNLIMITED TABLESPACE TO C##_' || ALIASv;
      EXECUTE IMMEDIATE 'GRANT SELECT, INSERT, UPDATE, DELETE ON SYS.USUARIO TO C##_' || ALIASv;
    
    COMMIT;
    END IF;
    
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
END;
/

-- • Modifica los datos de un administrador existente.
-- • Entrada: identificador de administrador y datos del administrador.
-- • Usuario autorizado: admin
-- • Test: EXEC SP_MODIFICAR_ADMIN (ALIASv => 'HOLA7', ALIASv2 => 'HOLAUPDATED', NOMBREv => 'NOMBREUPDATED', APELLIDOSv => 'APELLIDOSUPDATED', DIRECCIONv => 'DIRUPDATED', CEDULAv => 5556, CORREOv => 'JOJOUPDATED', CALIFICACIONv => 1, PASSWORDv => 'PASSUPDATED');

CREATE OR REPLACE PROCEDURE SP_MODIFICAR_ADMIN
(
  ALIASv IN VARCHAR2 -- Alias actual.
, NOMBREv IN NVARCHAR2 DEFAULT NULL
, APELLIDOSv IN NVARCHAR2 DEFAULT NULL
, DIRECCIONv IN NVARCHAR2 DEFAULT NULL
, CEDULAv IN INTEGER DEFAULT NULL
, CORREOv IN VARCHAR2 DEFAULT NULL
, PASSWORDv IN VARCHAR2 DEFAULT NULL
, NUMEROv IN VARCHAR2 DEFAULT NULL
, DESCRIPCIONv IN NVARCHAR2 DEFAULT 'PRINCIPAL'
)
IS 
-- Variable para saber si ya se encuentra registrado el usuario.
-- Si es 0, no existe el alias.
VAL SMALLINT;

BEGIN
    SELECT COUNT(*) INTO VAL
    FROM SYS.USUARIO
    WHERE SYS.USUARIO.ALIAS = ALIASv;
    
    IF VAL = 1 THEN
      IF NOMBREv IS NOT NULL THEN
        SP_MODIFICAR_USUARIO_NOMBRE(ALIASv=>ALIASv, NOMBREv=>NOMBREv);
      END IF;

      IF APELLIDOSv IS NOT NULL THEN
        SP_MODIFICAR_USUARIO_APELLIDOS(ALIASv=>ALIASv, APELLIDOSv=>APELLIDOSv);
      END IF;

      IF DIRECCIONv IS NOT NULL THEN
        SP_MODIFICAR_USUARIO_DIRECCION(ALIASv=>ALIASv, DIRECCIONv=>DIRECCIONv);
      END IF;

      IF CEDULAv IS NOT NULL THEN
        SP_MODIFICAR_USUARIO_CEDULA(ALIASv=>ALIASv, CEDULAv=>CEDULAv);
      END IF;

      IF CORREOv IS NOT NULL THEN
        SP_MODIFICAR_USUARIO_CORREO(ALIASv=>ALIASv, CORREOv=>CORREOv);
      END IF;

      IF PASSWORDv IS NOT NULL THEN
        SP_MODIFICAR_USUARIO_PASSWORD(ALIASv=>ALIASv, PASSWORDv=>PASSWORDv);
      END IF;

      IF NUMEROv IS NOT NULL THEN
        SP_MODIFICAR_USUARIO_NUMERO(ALIASv=>ALIASv, NUMEROv=>NUMEROv);
      END IF;

      -- If new alias create new user
      IF PASSWORDv IS NOT NULL THEN
        EXECUTE IMMEDIATE 'ALTER USER C##_' || ALIASv || ' IDENTIFIED BY "' || PASSWORDv ||'"';
      END IF;

    COMMIT;
    END IF;
    
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
END;
/

-- • Incluir un nuevo participante en el sistema.
-- • Entrada: datos del nuevo participante.
-- • Usuario autorizado: admin
-- • EXEC SP_CREAR_PARTICIPANTE (ALIASv => 'HOLA', NOMBREv => 'NOMBREHOLA', APELLIDOSv => 'APELLIDOSHOLA', DIRECCIONv => 'DIRECCIONHOLA', CEDULAv => 5555, CORREOv => 'JOJO', PASSWORDv => 'PASS');

CREATE OR REPLACE PROCEDURE SP_CREAR_PARTICIPANTE
(
  ALIASv IN VARCHAR2
, NOMBREv IN NVARCHAR2
, APELLIDOSv IN NVARCHAR2
, DIRECCIONv IN NVARCHAR2
, CEDULAv IN INTEGER
, CORREOv IN VARCHAR2
, CALIFICACIONv IN SMALLINT DEFAULT 5
, PASSWORDv IN VARCHAR2
, NUMEROv IN VARCHAR2
, DESCRIPCIONv IN NVARCHAR2 DEFAULT 'PRINCIPAL'
)
IS 
-- Variable para saber si ya se encuentra registrado el usuario.
-- Si es 0, no existe el alias.
VAL SMALLINT;

BEGIN
    SELECT COUNT(*) INTO VAL
    FROM SYS.USUARIO
    WHERE SYS.USUARIO.ALIAS = ALIASv
    OR SYS.USUARIO.CEDULA = CEDULAv;

    IF VAL = 0 THEN
      INSERT INTO SYS.USUARIO (ALIAS, NOMBRE, APELLIDOS, DIRECCION, CEDULA, CORREO, CALIFICACION, PASSWORD)
      VALUES (ALIASv, NOMBREv, APELLIDOSv, DIRECCIONv, CEDULAv, CORREOv, CALIFICACIONv, PASSWORDv);
    
      INSERT INTO SYS.TIPOXUSUARIO (ALIASUSUARIO, DESCRIPCION)
      VALUES (ALIASv, 'PARTICIPANTE');

      INSERT INTO SYS.TELEFONOXUSUARIO (ALIASUSUARIO, NUMERO, DESCRIPCION)
      VALUES (ALIASv, NUMEROv, DESCRIPCIONv);
    
      EXECUTE IMMEDIATE 'CREATE USER C##_' || ALIASv || ' IDENTIFIED BY "' || PASSWORDv ||'"';
      EXECUTE IMMEDIATE 'GRANT CONNECT, RESOURCE TO C##_' || ALIASv;
      EXECUTE IMMEDIATE 'GRANT CREATE SESSION TO C##_' || ALIASv;
      EXECUTE IMMEDIATE 'GRANT UNLIMITED TABLESPACE TO C##_' || ALIASv;
      EXECUTE IMMEDIATE 'GRANT SELECT, INSERT, UPDATE, DELETE ON SYS.USUARIO TO C##_' || ALIASv;
      EXECUTE IMMEDIATE 'GRANT SELECT ON SYS.CATEGORIA TO C##_' || ALIASv;
      EXECUTE IMMEDIATE 'GRANT SELECT ON SYS.SUBCATEGORIA TO C##_' || ALIASv;
      EXECUTE IMMEDIATE 'GRANT SELECT, INSERT, UPDATE, DELETE ON SYS.PUJA TO C##_' || ALIASv;

    COMMIT;
    END IF;
    
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
END;
/

-- • Modifica los datos de un usuario existente.
-- • Entrada: identificador de usuario y datos del usuario.
-- • Usuario autorizado: admin
-- • Test: EXEC SP_MODIFICAR_PARTICIPANTE (ALIASv => 'HOLA7', ALIASv2 => 'HOLAUPDATED', NOMBREv => 'NOMBREUPDATED', APELLIDOSv => 'APELLIDOSUPDATED', DIRECCIONv => 'DIRUPDATED', CEDULAv => 5556, CORREOv => 'JOJOUPDATED', CALIFICACIONv => 1, PASSWORDv => 'PASSUPDATED');

CREATE OR REPLACE PROCEDURE SP_MODIFICAR_PARTICIPANTE
(
  ALIASv IN VARCHAR2
, NOMBREv IN NVARCHAR2 DEFAULT NULL
, APELLIDOSv IN NVARCHAR2 DEFAULT NULL
, DIRECCIONv IN NVARCHAR2 DEFAULT NULL
, CEDULAv IN INTEGER DEFAULT NULL
, CORREOv IN VARCHAR2 DEFAULT NULL
, PASSWORDv IN VARCHAR2 DEFAULT NULL
, NUMEROv IN VARCHAR2 DEFAULT NULL
, DESCRIPCIONv IN NVARCHAR2 DEFAULT 'PRINCIPAL'
)
IS 
-- Variable para saber si ya se encuentra registrado el usuario.
-- Si es 0, no existe el alias.
VAL SMALLINT;

BEGIN
    SELECT COUNT(*) INTO VAL
    FROM SYS.USUARIO
    WHERE SYS.USUARIO.ALIAS = ALIASv;
    
    IF VAL = 1 THEN
      IF NOMBREv IS NOT NULL THEN
        SP_MODIFICAR_USUARIO_NOMBRE(ALIASv=>ALIASv, NOMBREv=>NOMBREv);
      END IF;

      IF APELLIDOSv IS NOT NULL THEN
        SP_MODIFICAR_USUARIO_APELLIDOS(ALIASv=>ALIASv, APELLIDOSv=>APELLIDOSv);
      END IF;

      IF DIRECCIONv IS NOT NULL THEN
        SP_MODIFICAR_USUARIO_DIRECCION(ALIASv=>ALIASv, DIRECCIONv=>DIRECCIONv);
      END IF;

      IF CEDULAv IS NOT NULL THEN
        SP_MODIFICAR_USUARIO_CEDULA(ALIASv=>ALIASv, CEDULAv=>CEDULAv);
      END IF;

      IF CORREOv IS NOT NULL THEN
        SP_MODIFICAR_USUARIO_CORREO(ALIASv=>ALIASv, CORREOv=>CORREOv);
      END IF;

      IF PASSWORDv IS NOT NULL THEN
        SP_MODIFICAR_USUARIO_PASSWORD(ALIASv=>ALIASv, PASSWORDv=>PASSWORDv);
      END IF;

      IF NUMEROv IS NOT NULL THEN
        SP_MODIFICAR_USUARIO_NUMERO(ALIASv=>ALIASv, NUMEROv=>NUMEROv);
      END IF;

      -- If new alias create new user
      IF PASSWORDv IS NOT NULL THEN
        EXECUTE IMMEDIATE 'ALTER USER C##_' || ALIASv || ' IDENTIFIED BY "' || PASSWORDv ||'"';
      END IF;

    COMMIT;
    END IF;
    
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
END;
/

-- • Incluir un nueva subasta
-- • Entrada: datos de la subasta
-- • Usuario autorizado: participante
-- • Test: EXEC SP_SUBASTAR_ITEM (ALIASv => 'HOLA7', ALIASv2 => 'HOLAUPDATED', NOMBREv => 'NOMBREUPDATED', APELLIDOSv => 'APELLIDOSUPDATED', DIRECCIONv => 'DIRUPDATED', CEDULAv => 5556, CORREOv => 'JOJOUPDATED', CALIFICACIONv => 1, PASSWORDv => 'PASSUPDATED');

--EXEC SP_SUBASTAR_ITEM (ALIASVENDEDORv=>3,MODOENTREGAv=>'Carro', PRECIOINICIALv=>5, FECHAHORAFINv=>'2018/04/03 21:02:44', COMENTARIOVENDEDORv=>'hola', ESTADOSUBASTAv=>1, DESCRIPCIONITEMv=>'botella', IDSUBCATEGORIAv=>5)

CREATE OR REPLACE PROCEDURE SP_SUBASTAR_ITEM --INCOMPLETED
(
  ALIASVENDEDORv IN VARCHAR2
, MODOENTREGAv IN NVARCHAR2
, PRECIOINICIALv IN NUMBER
, FECHAFINv IN VARCHAR2
, HORAFINv IN VARCHAR2
, COMENTARIOVENDEDORv IN NVARCHAR2
, ESTADOSUBASTAv IN SMALLINT DEFAULT 1 -- 1: Subasta activa
, DESCRIPCIONITEMv IN NVARCHAR2
, IDSUBCATEGORIAv IN NUMBER
--, FOTO
)
IS
  IDITEMv NUMBER;
BEGIN
    -- Crea ítem de subasta.
    INSERT INTO SYS.ITEM (PRECIO, DESCRIPCION, IDSUBCATEGORIA, FOTO)
    VALUES (PRECIOINICIALv, DESCRIPCIONITEMv, IDSUBCATEGORIAv, EMPTY_BLOB());
    
    SELECT COUNT(*) INTO IDITEMv
    FROM SYS.ITEM;
    
    --Crea subasta.
    INSERT INTO SYS.SUBASTA (IDITEM, ALIASVENDEDOR, MODOENTREGA, PRECIOINICIAL, FECHAHORAFIN, COMENTARIOVENDEDOR, ESTADOSUBASTA)
    VALUES (IDITEMv, ALIASVENDEDORv, MODOENTREGAv, PRECIOINICIALv, TO_DATE(FECHAFINv || ' ' || HORAFINv, 'yyyy/mm/dd hh24:mi:ss'), COMENTARIOVENDEDORv, ESTADOSUBASTAv);

    COMMIT;
    DBMS_OUTPUT.PUT_LINE('1');
    
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('0');
END;
/

-- • Lista todas las subastas activas que cumplen con las condiciones de entrada.
-- • Entrada: categoría y sub categoría.
-- • Listar resultado por tiempo restante de puja decreciente.
-- • Usuario autorizado: cualquiera
-- • Test: 

CREATE OR REPLACE PROCEDURE SP_LISTAR_SUBASTAS
(
  CATEGORIAv IN NUMBER DEFAULT NULL
, SUBCATEGORIAv IN NUMBER
)
IS
BEGIN
  -- No es necesario buscar la categoría, pues ya al seleccionar subcategoría la categoría enviada está asegurada.
  DECLARE 
  CURSOR CSUBASTA IS 
    SELECT SUBASTA.ALIASVENDEDOR, SUBASTA.PRECIOINICIAL, SUBASTA.PRECIOACTUAL, SUBASTA.FECHAHORAFIN, SUBASTA.COMENTARIOVENDEDOR
    FROM SYS.SUBASTA SUBASTA
    INNER JOIN SYS.ITEM ITEM
    ON ITEM.ID = SUBASTA.IDITEM
    WHERE ITEM.IDSUBCATEGORIA = SUBCATEGORIAv
    AND SUBASTA.ESTADOSUBASTA = 1 -- 1: subasta activa.
    ORDER BY SUBASTA.FECHAHORAFIN DESC;

  ALIASVENDEDORr SYS.SUBASTA.ALIASVENDEDOR%TYPE;
  PRECIOINICIALr SYS.SUBASTA.PRECIOINICIAL%TYPE;
  PRECIOACTUALr SYS.SUBASTA.PRECIOACTUAL%TYPE;
  FECHAHORAFINr SYS.SUBASTA.FECHAHORAFIN%TYPE;
  COMENTARIOVENDEDORr SYS.SUBASTA.COMENTARIOVENDEDOR%TYPE;

  BEGIN
    OPEN CSUBASTA;
      LOOP
        FETCH CSUBASTA INTO ALIASVENDEDORr, PRECIOINICIALr, PRECIOACTUALr, FECHAHORAFINr, COMENTARIOVENDEDORr;
        EXIT WHEN CSUBASTA%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(ALIASVENDEDORr || ', ' || TO_CHAR(FECHAHORAFINr,'DD-MON-YYYY') || ', ' || TO_CHAR(FECHAHORAFINr,'HH24:MI'));
      END LOOP;
    CLOSE CSUBASTA;
  END;

  COMMIT;

  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
END;
/

-- • Para un usuario dado, listar las subastas que ha realizado.
-- • Entrada: identificador del usuario vendedor.
-- • Salida: listado cronológico de ítemes ofrecidos, precios base,
--   precios finales, comentarios de los usuarios compradores que ganaron las subastas.
-- • Usuario autorizado: cualquiera
-- • Test: EXEC SP_CREAR_ADMIN (ALIASv => 'HOLA', NOMBREv => 'NOMBREHOLA', APELLIDOSv => 'APELLIDOSHOLA', DIRECCIONv => 'DIRECCIONHOLA', CEDULAv => 5555, CORREOv => 'JOJO', PASSWORDv => 'PASS');

CREATE OR REPLACE PROCEDURE SP_LISTAR_SUBASTAS_USUARIO
(
  ALIASVENDEDORv IN VARCHAR2
)
IS
BEGIN
  DECLARE 
  CURSOR CSUBASTA IS 
    SELECT SUBASTA.FECHAHORAFIN, SUBASTA.IDITEM, SUBASTA.PRECIOINICIAL, SUBASTA.PRECIOACTUAL, SUBASTA.COMENTARIOCOMPRADOR, SUBASTA.ESTADOSUBASTA
    FROM SYS.SUBASTA SUBASTA
    WHERE SUBASTA.ALIASVENDEDOR = ALIASVENDEDORv
    ORDER BY SUBASTA.FECHAHORAFIN;

  FECHAHORAFINr SYS.SUBASTA.FECHAHORAFIN%TYPE;
  IDITEMr SYS.SUBASTA.IDITEM%TYPE;
  PRECIOINICIALr SYS.SUBASTA.PRECIOINICIAL%TYPE;
  PRECIOACTUALr SYS.SUBASTA.PRECIOACTUAL%TYPE;
  COMENTARIOCOMPRADORr SYS.SUBASTA.COMENTARIOCOMPRADOR%TYPE;
  ESTADOSUBASTAr SYS.SUBASTA.ESTADOSUBASTA%TYPE;

  BEGIN
    OPEN CSUBASTA;
      LOOP
        FETCH CSUBASTA INTO FECHAHORAFINr, IDITEMr, PRECIOINICIALr, PRECIOACTUALr, COMENTARIOCOMPRADORr, ESTADOSUBASTAr;
        EXIT WHEN CSUBASTA%NOTFOUND;
        --DBMS_OUTPUT.PUT_LINE(ALIASVENDEDORv || ', ' || FECHAHORAFINr);
      END LOOP;
    CLOSE CSUBASTA;
  END;
  COMMIT;
  
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
END;
/