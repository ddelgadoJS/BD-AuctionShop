-- • Incluir un nuevo usuario (administrador o participante) en el sistema.
-- • Entrada: datos del nuevo usuario.
-- • Usuario autorizado: admin

CREATE OR REPLACE PROCEDURE SP_CREAR_USUARIO
(
  ALIASv IN VARCHAR2
, NOMBREv IN NVARCHAR2
, APELLIDOSv IN NVARCHAR2
, DIRECCIONv IN NVARCHAR2
, CEDULAv IN INTEGER
, CORREOv IN VARCHAR2
, CALIFICACIONv IN SMALLINT DEFAULT 5
, PASSWORDv IN VARCHAR2
, NUMEROv IN VARCHAR2
, DESCRIPCIONv IN NVARCHAR2 DEFAULT 'PRINCIPAL'
, TIPOUSUARIOv IN NVARCHAR2 DEFAULT 'PARTICIPANTE'
)
IS
-- Variable para saber si ya se encuentra registrado el usuario.
-- Si es 0, no existe el alias.
VAL SMALLINT;

BEGIN
    SELECT COUNT(*) INTO VAL
    FROM C##_USUARIO_ADMIN.USUARIO USUARIO
    WHERE USUARIO.ALIAS = ALIASv
    OR USUARIO.CEDULA = CEDULAv;

    IF VAL = 0 THEN
      INSERT INTO C##_USUARIO_ADMIN.USUARIO (ALIAS, NOMBRE, APELLIDOS, DIRECCION, CEDULA, CORREO, CALIFICACION, PASSWORD)
      VALUES (ALIASv, NOMBREv, APELLIDOSv, DIRECCIONv, CEDULAv, CORREOv, CALIFICACIONv, PASSWORDv);
    
      INSERT INTO C##_USUARIO_ADMIN.TIPOXUSUARIO (ALIASUSUARIO, DESCRIPCION)
      VALUES (ALIASv, TIPOUSUARIOv);

      INSERT INTO C##_USUARIO_ADMIN.TELEFONOXUSUARIO (ALIASUSUARIO, NUMERO, DESCRIPCION)
      VALUES (ALIASv, NUMEROv, DESCRIPCIONv);
    
      EXECUTE IMMEDIATE 'CREATE USER C##_' || ALIASv || ' IDENTIFIED BY "' || PASSWORDv ||'"';
      EXECUTE IMMEDIATE 'GRANT ALL PRIVILEGES TO C##_' || ALIASv;

      --IF TIPOUSUARIOv = 'ADMINISTRADOR' THEN -- Crear administrador
        --EXECUTE IMMEDIATE 'GRANT ALL PRIVILEGES TO C##_' || ALIASv;
        --EXECUTE IMMEDIATE 'GRANT CONNECT, RESOURCE, DBA TO C##_' || ALIASv;
        --EXECUTE IMMEDIATE 'GRANT CREATE SESSION TO C##_' || ALIASv;
        --EXECUTE IMMEDIATE 'GRANT UNLIMITED TABLESPACE TO C##_' || ALIASv;
        --EXECUTE IMMEDIATE 'GRANT SELECT, INSERT, UPDATE, DELETE ON USUARIO TO C##_' || ALIASv;
      
      --ELSE -- Crear participante
        --EXECUTE IMMEDIATE 'GRANT ALL PRIVILEGES TO C##_' || ALIASv;
        /*
        EXECUTE IMMEDIATE 'GRANT CONNECT, RESOURCE TO C##_' || ALIASv;
        EXECUTE IMMEDIATE 'GRANT CREATE SESSION TO C##_' || ALIASv;
        EXECUTE IMMEDIATE 'GRANT UNLIMITED TABLESPACE TO C##_' || ALIASv;
        EXECUTE IMMEDIATE 'GRANT SELECT, INSERT, UPDATE, DELETE ON USUARIO TO C##_' || ALIASv;
        EXECUTE IMMEDIATE 'GRANT SELECT ON CATEGORIA TO C##_' || ALIASv;
        EXECUTE IMMEDIATE 'GRANT SELECT ON SUBCATEGORIA TO C##_' || ALIASv;
        EXECUTE IMMEDIATE 'GRANT SELECT, INSERT, UPDATE, DELETE ON PUJA TO C##_' || ALIASv;
        */
      --END IF;

      DBMS_OUTPUT.PUT_LINE('1');  -- Usuario creado.
    ELSE
      COMMIT;
      DBMS_OUTPUT.PUT_LINE('0'); -- Alias o cédula duplicadas.
    END IF;

    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('ERROR'); -- Alias o cédula duplicadas.
END;
/

-- • Incluir un nuevo administrador en el sistema.
-- • Entrada: datos del nuevo administrador.
-- • Usuario autorizado: admin
-- • Test: EXEC SP_CREAR_ADMIN (ALIASv => 'HOLA', NOMBREv => 'NOMBREHOLA', APELLIDOSv => 'APELLIDOSHOLA', DIRECCIONv => 'DIRECCIONHOLA', CEDULAv => 5555, CORREOv => 'JOJO', PASSWORDv => 'PASS');

CREATE OR REPLACE PROCEDURE SP_CREAR_ADMIN
(
  ALIASv IN VARCHAR2
, NOMBREv IN NVARCHAR2
, APELLIDOSv IN NVARCHAR2
, DIRECCIONv IN NVARCHAR2
, CEDULAv IN INTEGER
, CORREOv IN VARCHAR2
, CALIFICACIONv IN SMALLINT DEFAULT 5
, PASSWORDv IN VARCHAR2
, NUMEROv IN VARCHAR2
, DESCRIPCIONv IN NVARCHAR2 DEFAULT 'PRINCIPAL'
)
IS 
-- Variable para saber si ya se encuentra registrado el usuario.
-- Si es 0, no existe el alias.
VAL SMALLINT;

BEGIN
    SELECT COUNT(*) INTO VAL
    FROM C##_USUARIO_ADMIN.USUARIO USUARIO
    WHERE USUARIO.ALIAS = ALIASv
    OR USUARIO.CEDULA = CEDULAv;

    IF VAL = 0 THEN
      INSERT INTO C##_USUARIO_ADMIN.USUARIO (ALIAS, NOMBRE, APELLIDOS, DIRECCION, CEDULA, CORREO, CALIFICACION, PASSWORD)
      VALUES (ALIASv, NOMBREv, APELLIDOSv, DIRECCIONv, CEDULAv, CORREOv, CALIFICACIONv, PASSWORDv);

      INSERT INTO C##_USUARIO_ADMIN.TIPOXUSUARIO (ALIASUSUARIO, DESCRIPCION)
      VALUES (ALIASv, 'ADMINISTRADOR');

      INSERT INTO C##_USUARIO_ADMIN.TELEFONOXUSUARIO (ALIASUSUARIO, NUMERO, DESCRIPCION)
      VALUES (ALIASv, NUMEROv, DESCRIPCIONv);
    
      EXECUTE IMMEDIATE 'CREATE USER C##_' || ALIASv || ' IDENTIFIED BY "' || PASSWORDv ||'"';
      EXECUTE IMMEDIATE 'GRANT CONNECT, RESOURCE, DBA TO C##_' || ALIASv;
      EXECUTE IMMEDIATE 'GRANT CREATE SESSION TO C##_' || ALIASv;
      EXECUTE IMMEDIATE 'GRANT UNLIMITED TABLESPACE TO C##_' || ALIASv;
      EXECUTE IMMEDIATE 'GRANT SELECT, INSERT, UPDATE, DELETE ON USUARIO TO C##_' || ALIASv;
    
    COMMIT;
    END IF;
    
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
END;
/

-- • Modifica los datos de un administrador existente.
-- • Entrada: identificador de administrador y datos del administrador.
-- • Usuario autorizado: admin
-- • Test: EXEC SP_MODIFICAR_ADMIN (ALIASv => 'HOLA7', ALIASv2 => 'HOLAUPDATED', NOMBREv => 'NOMBREUPDATED', APELLIDOSv => 'APELLIDOSUPDATED', DIRECCIONv => 'DIRUPDATED', CEDULAv => 5556, CORREOv => 'JOJOUPDATED', CALIFICACIONv => 1, PASSWORDv => 'PASSUPDATED');

CREATE OR REPLACE PROCEDURE SP_MODIFICAR_ADMIN
(
  ALIASv IN VARCHAR2 -- Alias actual.
, NOMBREv IN NVARCHAR2 DEFAULT NULL
, APELLIDOSv IN NVARCHAR2 DEFAULT NULL
, DIRECCIONv IN NVARCHAR2 DEFAULT NULL
, CEDULAv IN INTEGER DEFAULT NULL
, CORREOv IN VARCHAR2 DEFAULT NULL
, PASSWORDv IN VARCHAR2 DEFAULT NULL
, NUMEROv IN VARCHAR2 DEFAULT NULL
, DESCRIPCIONv IN NVARCHAR2 DEFAULT 'PRINCIPAL'
)
IS
-- Variable para saber si ya se encuentra registrado el usuario.
-- Si es 0, no existe el alias.
VAL SMALLINT;

BEGIN
    SELECT COUNT(*) INTO VAL
    FROM C##_USUARIO_ADMIN.USUARIO USUARIO
    WHERE C##_USUARIO_ADMIN.USUARIO.ALIAS = ALIASv;
    
    IF VAL = 1 THEN
      IF NOMBREv IS NOT NULL THEN
        UPDATE C##_USUARIO_ADMIN.USUARIO 
        SET   NOMBRE = NOMBREv
        WHERE ALIAS = ALIASv;      
      END IF;

      IF APELLIDOSv IS NOT NULL THEN
        UPDATE C##_USUARIO_ADMIN.USUARIO 
        SET   APELLIDOS = APELLIDOSv
        WHERE ALIAS = ALIASv;  
      END IF;

      IF DIRECCIONv IS NOT NULL THEN
        UPDATE C##_USUARIO_ADMIN.USUARIO 
        SET   DIRECCION = DIRECCIONv
        WHERE ALIAS = ALIASv;
      END IF;

      IF CEDULAv IS NOT NULL THEN
        UPDATE C##_USUARIO_ADMIN.USUARIO 
        SET   CEDULA = CEDULAv
        WHERE ALIAS = ALIASv;  
      END IF;

      IF CORREOv IS NOT NULL THEN
        UPDATE C##_USUARIO_ADMIN.USUARIO 
        SET   CORREO = CORREOv
        WHERE ALIAS = ALIASv;
      END IF;

      IF PASSWORDv IS NOT NULL THEN
        UPDATE C##_USUARIO_ADMIN.USUARIO 
        SET   PASSWORD = PASSWORDv
        WHERE ALIAS = ALIASv;

        EXECUTE IMMEDIATE 'ALTER USER C##_' || ALIASv || ' IDENTIFIED BY "' || PASSWORDv ||'"';
      END IF;

      IF NUMEROv IS NOT NULL THEN
        UPDATE C##_USUARIO_ADMIN.TELEFONOXUSUARIO 
        SET   NUMERO = NUMEROv
        WHERE ALIASUSUARIO = ALIASv;
      END IF;

    COMMIT;
    END IF;
    
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
END;
/

-- • Incluir un nuevo participante en el sistema.
-- • Entrada: datos del nuevo participante.
-- • Usuario autorizado: admin
-- • EXEC SP_CREAR_PARTICIPANTE (ALIASv => 'HOLA', NOMBREv => 'NOMBREHOLA', APELLIDOSv => 'APELLIDOSHOLA', DIRECCIONv => 'DIRECCIONHOLA', CEDULAv => 5555, CORREOv => 'JOJO', PASSWORDv => 'PASS');

CREATE OR REPLACE PROCEDURE SP_CREAR_PARTICIPANTE
(
  ALIASv IN VARCHAR2
, NOMBREv IN NVARCHAR2
, APELLIDOSv IN NVARCHAR2
, DIRECCIONv IN NVARCHAR2
, CEDULAv IN INTEGER
, CORREOv IN VARCHAR2
, CALIFICACIONv IN SMALLINT DEFAULT 5
, PASSWORDv IN VARCHAR2
, NUMEROv IN VARCHAR2
, DESCRIPCIONv IN NVARCHAR2 DEFAULT 'PRINCIPAL'
)
IS 
-- Variable para saber si ya se encuentra registrado el usuario.
-- Si es 0, no existe el alias.
VAL SMALLINT;

BEGIN
    SELECT COUNT(*) INTO VAL
    FROM C##_USUARIO_ADMIN.USUARIO USUARIO
    WHERE USUARIO.ALIAS = ALIASv
    OR USUARIO.CEDULA = CEDULAv;

    IF VAL = 0 THEN
      INSERT INTO C##_USUARIO_ADMIN.USUARIO (ALIAS, NOMBRE, APELLIDOS, DIRECCION, CEDULA, CORREO, CALIFICACION, PASSWORD)
      VALUES (ALIASv, NOMBREv, APELLIDOSv, DIRECCIONv, CEDULAv, CORREOv, CALIFICACIONv, PASSWORDv);
    
      INSERT INTO C##_USUARIO_ADMIN.TIPOXUSUARIO (ALIASUSUARIO, DESCRIPCION)
      VALUES (ALIASv, 'PARTICIPANTE');

      INSERT INTO C##_USUARIO_ADMIN.TELEFONOXUSUARIO (ALIASUSUARIO, NUMERO, DESCRIPCION)
      VALUES (ALIASv, NUMEROv, DESCRIPCIONv);
    
      EXECUTE IMMEDIATE 'CREATE USER C##_' || ALIASv || ' IDENTIFIED BY "' || PASSWORDv ||'"';
      EXECUTE IMMEDIATE 'GRANT CONNECT, RESOURCE TO C##_' || ALIASv;
      EXECUTE IMMEDIATE 'GRANT CREATE SESSION TO C##_' || ALIASv;
      EXECUTE IMMEDIATE 'GRANT UNLIMITED TABLESPACE TO C##_' || ALIASv;
      EXECUTE IMMEDIATE 'GRANT SELECT, INSERT, UPDATE, DELETE ON USUARIO TO C##_' || ALIASv;
      EXECUTE IMMEDIATE 'GRANT SELECT ON CATEGORIA TO C##_' || ALIASv;
      EXECUTE IMMEDIATE 'GRANT SELECT ON SUBCATEGORIA TO C##_' || ALIASv;
      EXECUTE IMMEDIATE 'GRANT SELECT, INSERT, UPDATE, DELETE ON PUJA TO C##_' || ALIASv;

    COMMIT;
    END IF;
    
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
END;
/

-- • Modifica los datos de un usuario existente.
-- • Entrada: identificador de usuario y datos del usuario.
-- • Usuario autorizado: admin
-- • Test: EXEC SP_MODIFICAR_PARTICIPANTE (ALIASv => 'HOLA7', ALIASv2 => 'HOLAUPDATED', NOMBREv => 'NOMBREUPDATED', APELLIDOSv => 'APELLIDOSUPDATED', DIRECCIONv => 'DIRUPDATED', CEDULAv => 5556, CORREOv => 'JOJOUPDATED', CALIFICACIONv => 1, PASSWORDv => 'PASSUPDATED');

CREATE OR REPLACE PROCEDURE SP_MODIFICAR_PARTICIPANTE
(
  ALIASv IN VARCHAR2
, NOMBREv IN NVARCHAR2 DEFAULT NULL
, APELLIDOSv IN NVARCHAR2 DEFAULT NULL
, DIRECCIONv IN NVARCHAR2 DEFAULT NULL
, CEDULAv IN INTEGER DEFAULT NULL
, CORREOv IN VARCHAR2 DEFAULT NULL
, PASSWORDv IN VARCHAR2 DEFAULT NULL
, NUMEROv IN VARCHAR2 DEFAULT NULL
, DESCRIPCIONv IN NVARCHAR2 DEFAULT 'PRINCIPAL'
)
IS 
-- Variable para saber si ya se encuentra registrado el usuario.
-- Si es 0, no existe el alias.
VAL SMALLINT;

BEGIN
    SELECT COUNT(*) INTO VAL
    FROM C##_USUARIO_ADMIN.USUARIO USUARIO
    WHERE C##_USUARIO_ADMIN.USUARIO.ALIAS = ALIASv;
    
    IF VAL = 1 THEN
      IF NOMBREv IS NOT NULL THEN
        UPDATE C##_USUARIO_ADMIN.USUARIO 
        SET   NOMBRE = NOMBREv
        WHERE ALIAS = ALIASv;      
      END IF;

      IF APELLIDOSv IS NOT NULL THEN
        UPDATE C##_USUARIO_ADMIN.USUARIO 
        SET   APELLIDOS = APELLIDOSv
        WHERE ALIAS = ALIASv;  
      END IF;

      IF DIRECCIONv IS NOT NULL THEN
        UPDATE C##_USUARIO_ADMIN.USUARIO 
        SET   DIRECCION = DIRECCIONv
        WHERE ALIAS = ALIASv;
      END IF;

      IF CEDULAv IS NOT NULL THEN
        UPDATE C##_USUARIO_ADMIN.USUARIO 
        SET   CEDULA = CEDULAv
        WHERE ALIAS = ALIASv;  
      END IF;

      IF CORREOv IS NOT NULL THEN
        UPDATE C##_USUARIO_ADMIN.USUARIO 
        SET   CORREO = CORREOv
        WHERE ALIAS = ALIASv;
      END IF;

      IF PASSWORDv IS NOT NULL THEN
        UPDATE C##_USUARIO_ADMIN.USUARIO 
        SET   PASSWORD = PASSWORDv
        WHERE ALIAS = ALIASv;

        EXECUTE IMMEDIATE 'ALTER USER C##_' || ALIASv || ' IDENTIFIED BY "' || PASSWORDv ||'"';
      END IF;

      IF NUMEROv IS NOT NULL THEN
        UPDATE TELEFONOXUSUARIO 
        SET   NUMERO = NUMEROv
        WHERE ALIASUSUARIO = ALIASv;
      END IF;

    COMMIT;
    END IF;
    
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
END;
/

-- • Consulta si es PARTICIPANTE o ADMINISTRADOR y llama el SP correspondiente.
-- • Entrada: ALIASv
-- • Usuario autorizado: admin.

CREATE OR REPLACE PROCEDURE SP_MODIFICAR_USUARIO
(
  ALIASv IN VARCHAR2
, NOMBREv IN NVARCHAR2 DEFAULT NULL
, APELLIDOSv IN NVARCHAR2 DEFAULT NULL
, DIRECCIONv IN NVARCHAR2 DEFAULT NULL
, CEDULAv IN INTEGER DEFAULT NULL
, CORREOv IN VARCHAR2 DEFAULT NULL
, PASSWORDv IN VARCHAR2 DEFAULT NULL
, NUMEROv IN VARCHAR2 DEFAULT NULL
, DESCRIPCIONv IN NVARCHAR2 DEFAULT 'PRINCIPAL'
)
IS 
-- Variables para saber si ya se encuentra registrado el usuario.
USR SMALLINT; -- Si es 0, no existe el alias.
TYP SMALLINT; -- 0: ADMINISTRADOR. 1: PARTICIPANTE.
BEGIN
  SELECT COUNT(*) INTO USR
  FROM C##_USUARIO_ADMIN.USUARIO USUARIO
  WHERE USUARIO.ALIAS = ALIASv;

  IF USR = 1 THEN -- Alias encontrado.
    SELECT COUNT(*) INTO TYP
    FROM C##_USUARIO_ADMIN.TIPOXUSUARIO TIPOXUSUARIO
    WHERE TIPOXUSUARIO.ALIASUSUARIO = ALIASv
    AND TIPOXUSUARIO.DESCRIPCION = 'PARTICIPANTE';
    
    IF TYP = 0 THEN
      SP_MODIFICAR_ADMIN(ALIASv=>ALIASv,NOMBREv=>NOMBREv,APELLIDOSv=>APELLIDOSv,DIRECCIONv=>DIRECCIONv,CEDULAv=>CEDULAv,CORREOv=>CORREOv,PASSWORDv=>PASSWORDv,NUMEROv=>NUMEROv,DESCRIPCIONv=>DESCRIPCIONv);
      DBMS_OUTPUT.PUT_LINE('1,ADMINISTRADOR');
    ELSE
      SP_MODIFICAR_PARTICIPANTE(ALIASv=>ALIASv,NOMBREv=>NOMBREv,APELLIDOSv=>APELLIDOSv,DIRECCIONv=>DIRECCIONv,CEDULAv=>CEDULAv,CORREOv=>CORREOv,PASSWORDv=>PASSWORDv,NUMEROv=>NUMEROv,DESCRIPCIONv=>DESCRIPCIONv);
      DBMS_OUTPUT.PUT_LINE('1,PARTICIPANTE');
    END IF;
  ELSE -- Alias no encontrado.
    DBMS_OUTPUT.PUT_LINE('0,NULL');
  END IF;
END;
/

-- • Incluir un nueva subasta
-- • Entrada: datos de la subasta
-- • Usuario autorizado: participante
-- • Test: EXEC SP_SUBASTAR_ITEM (ALIASv => 'HOLA7', ALIASv2 => 'HOLAUPDATED', NOMBREv => 'NOMBREUPDATED', APELLIDOSv => 'APELLIDOSUPDATED', DIRECCIONv => 'DIRUPDATED', CEDULAv => 5556, CORREOv => 'JOJOUPDATED', CALIFICACIONv => 1, PASSWORDv => 'PASSUPDATED');

--EXEC SP_SUBASTAR_ITEM (ALIASVENDEDORv=>3,MODOENTREGAv=>'Carro', PRECIOINICIALv=>5, FECHAHORAFINv=>'2018/04/03 21:02:44', COMENTARIOVENDEDORv=>'hola', ESTADOSUBASTAv=>1, DESCRIPCIONITEMv=>'botella', IDSUBCATEGORIAv=>5)

CREATE OR REPLACE PROCEDURE SP_SUBASTAR_ITEM --INCOMPLETED
(
  ALIASVENDEDORv IN VARCHAR2
, MODOENTREGAv IN NVARCHAR2
, PRECIOINICIALv IN NUMBER
, FECHAFINv IN VARCHAR2
, HORAFINv IN VARCHAR2
, COMENTARIOVENDEDORv IN NVARCHAR2
, ESTADOSUBASTAv IN SMALLINT DEFAULT 1 -- 1: Subasta activa
, DESCRIPCIONITEMv IN NVARCHAR2
, IDSUBCATEGORIAv IN NUMBER
, FOTOv IN VARCHAR2 DEFAULT NULL
)
IS
  IDITEMv NUMBER;
BEGIN
    -- Crea ítem de subasta.
    INSERT INTO C##_USUARIO_ADMIN.ITEM (PRECIO, DESCRIPCION, IDSUBCATEGORIA, FOTO)
    VALUES (PRECIOINICIALv, DESCRIPCIONITEMv, IDSUBCATEGORIAv, FOTOv);
    
    SELECT COUNT(*) INTO IDITEMv
    FROM C##_USUARIO_ADMIN.ITEM ITEM;
    
    --Crea subasta.
    INSERT INTO C##_USUARIO_ADMIN.SUBASTA (IDITEM, ALIASVENDEDOR, MODOENTREGA, PRECIOINICIAL, PRECIOACTUAL, FECHAHORAFIN, COMENTARIOVENDEDOR, ESTADOSUBASTA)
    VALUES (IDITEMv, ALIASVENDEDORv, MODOENTREGAv, PRECIOINICIALv, PRECIOINICIALv, TO_DATE(FECHAFINv || ' ' || HORAFINv, 'yyyy/mm/dd hh24:mi:ss'), COMENTARIOVENDEDORv, ESTADOSUBASTAv);

    COMMIT;
    DBMS_OUTPUT.PUT_LINE('1');
    
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('0');
END;
/

-- • Lista todas las subastas activas que cumplen con las condiciones de entrada.
-- • Entrada: categoría y sub categoría.
-- • Listar resultado por tiempo restante de puja decreciente.
-- • Usuario autorizado: cualquiera

CREATE OR REPLACE PROCEDURE SP_LISTAR_SUBASTAS
(
  CATEGORIAv IN NUMBER DEFAULT NULL
, SUBCATEGORIAv IN NUMBER
)
IS
BEGIN
  -- No es necesario buscar la categoría, pues ya al seleccionar subcategoría la categoría enviada está asegurada.
  DECLARE 
  CURSOR CSUBASTA IS 
    SELECT SUBASTA.ID, SUBASTA.ALIASVENDEDOR, SUBASTA.PRECIOINICIAL, SUBASTA.PRECIOACTUAL, SUBASTA.FECHAHORAFIN, SUBASTA.COMENTARIOVENDEDOR
    FROM C##_USUARIO_ADMIN.SUBASTA SUBASTA
    INNER JOIN C##_USUARIO_ADMIN.ITEM ITEM
    ON ITEM.ID = SUBASTA.IDITEM
    WHERE ITEM.IDSUBCATEGORIA = SUBCATEGORIAv
    AND SUBASTA.ESTADOSUBASTA = 1 -- 1: subasta activa.
    ORDER BY SUBASTA.FECHAHORAFIN DESC;

  IDSUBASTAr C##_USUARIO_ADMIN.SUBASTA.ID%TYPE;
  ALIASVENDEDORr C##_USUARIO_ADMIN.SUBASTA.ALIASVENDEDOR%TYPE;
  PRECIOINICIALr C##_USUARIO_ADMIN.SUBASTA.PRECIOINICIAL%TYPE;
  PRECIOACTUALr C##_USUARIO_ADMIN.SUBASTA.PRECIOACTUAL%TYPE;
  FECHAHORAFINr C##_USUARIO_ADMIN.SUBASTA.FECHAHORAFIN%TYPE;
  COMENTARIOVENDEDORr C##_USUARIO_ADMIN.SUBASTA.COMENTARIOVENDEDOR%TYPE;

  BEGIN
    OPEN CSUBASTA;
      LOOP
        FETCH CSUBASTA INTO IDSUBASTAr, ALIASVENDEDORr, PRECIOINICIALr, PRECIOACTUALr, FECHAHORAFINr, COMENTARIOVENDEDORr;
        EXIT WHEN CSUBASTA%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(IDSUBASTAr || ', ' || ALIASVENDEDORr || ', ' || PRECIOACTUALr || ', ' || TO_CHAR(FECHAHORAFINr,'DD-MON-YYYY') || ', ' || TO_CHAR(FECHAHORAFINr,'HH24:MI'));
      END LOOP;
    CLOSE CSUBASTA;
  END;

  COMMIT;

  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
END;
/

-- • Para un usuario dado, listar las subastas que ha realizado.
-- • Entrada: identificador del usuario vendedor.
-- • Salida: listado cronológico de ítemes ofrecidos, precios base,
--   precios finales, comentarios de los usuarios compradores que ganaron las subastas.
-- • Usuario autorizado: cualquiera
-- • Test: EXEC SP_CREAR_ADMIN (ALIASv => 'HOLA', NOMBREv => 'NOMBREHOLA', APELLIDOSv => 'APELLIDOSHOLA', DIRECCIONv => 'DIRECCIONHOLA', CEDULAv => 5555, CORREOv => 'JOJO', PASSWORDv => 'PASS');

CREATE OR REPLACE PROCEDURE SP_LISTAR_SUBASTAS_USUARIO
(
  ALIASVENDEDORv IN VARCHAR2
)
IS
BEGIN
  DECLARE 
  CURSOR CSUBASTA IS 
    SELECT SUBASTA.FECHAHORAFIN, SUBASTA.IDITEM, SUBASTA.PRECIOINICIAL, SUBASTA.PRECIOACTUAL, SUBASTA.COMENTARIOCOMPRADOR, SUBASTA.ESTADOSUBASTA
    FROM C##_USUARIO_ADMIN.SUBASTA SUBASTA
    WHERE SUBASTA.ALIASVENDEDOR = ALIASVENDEDORv
    ORDER BY SUBASTA.FECHAHORAFIN;

  FECHAHORAFINr C##_USUARIO_ADMIN.SUBASTA.FECHAHORAFIN%TYPE;
  IDITEMr C##_USUARIO_ADMIN.SUBASTA.IDITEM%TYPE;
  PRECIOINICIALr C##_USUARIO_ADMIN.SUBASTA.PRECIOINICIAL%TYPE;
  PRECIOACTUALr C##_USUARIO_ADMIN.SUBASTA.PRECIOACTUAL%TYPE;
  COMENTARIOCOMPRADORr C##_USUARIO_ADMIN.SUBASTA.COMENTARIOCOMPRADOR%TYPE;
  ESTADOSUBASTAr C##_USUARIO_ADMIN.SUBASTA.ESTADOSUBASTA%TYPE;

  BEGIN
    OPEN CSUBASTA;
      LOOP
        FETCH CSUBASTA INTO FECHAHORAFINr, IDITEMr, PRECIOINICIALr, PRECIOACTUALr, COMENTARIOCOMPRADORr, ESTADOSUBASTAr;
        EXIT WHEN CSUBASTA%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(ALIASVENDEDORv || ', ' || FECHAHORAFINr);
      END LOOP;
    CLOSE CSUBASTA;
  END;
  COMMIT;
  
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
END;
/

-- PUJAR --
-- •  Incluir una nueva puja para una subasta.
-- •  Debe cumplir con las restricciones:
-- •  el monto debe superar al de la última puja por un monto mínimo establecido por el sistema
-- •  la puja se debe hacer dentro del rango de tiempo de la subasta.
-- •  Entrada: identificador del usuario que puja, monto ofrecido
-- •  Pujar por un ítem en subasta; para que sea aceptada la puja, la nueva oferta debe superar a la mejor oferta hasta ese momento en un monto que no sea menor a max(mejor_oferta * %MEJORA, INCREMENTO_MÍNIMO), dónde %MEJORA e INCREMENTO_MÍNIMO son parámetros del sistema

CREATE OR REPLACE PROCEDURE PUJAR
  (INCREMENTOMINIMO IN NUMBER,
  PORCENTAJEMEJORA IN NUMBER,
  ALIASCOMPRADORv IN VARCHAR2,
  IDSUBASTAv IN NUMBER,
  MONTOv IN NUMBER)

IS
  PRECIOMAYOR NUMBER;

BEGIN
    SELECT PRECIOACTUAL INTO PRECIOMAYOR
    FROM C##_USUARIO_ADMIN.SUBASTA SUBASTA
    WHERE SUBASTA.ID = IDSUBASTAv;

    IF (MONTOv - PRECIOMAYOR) >= (GREATEST(PRECIOMAYOR*PORCENTAJEMEJORA, INCREMENTOMINIMO))  THEN
      INSERT INTO C##_USUARIO_ADMIN.PUJA (PUJA.ALIASCOMPRADOR, PUJA.IDSUBASTA, PUJA.MONTO, PUJA.FECHAHORA)
      VALUES (ALIASCOMPRADORv, IDSUBASTAv, MONTOv, SYSDATE);
      COMMIT;
    END IF;

    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
END;
/

------------------------------------------------
-- Listar historial de PUJA para una subasta --
-- •  Para una subasta dada, lista las pujas realizadas.
-- •  Entrada: identificador de subasta
-- •  Salida: conjunto de pujas para ese subasta por fecha y hora decreciente.

CREATE OR REPLACE PROCEDURE HISTORIALPUJAS
  (IDSUBASTAv IN NUMBER)

IS

BEGIN
  DECLARE CURSOR CHISTORIAL IS
    SELECT PUJA.ID, PUJA.ALIASCOMPRADOR, PUJA.IDSUBASTA, PUJA.MONTO, PUJA.FECHAHORA
    FROM C##_USUARIO_ADMIN.PUJA PUJA
    WHERE PUJA.IDSUBASTA = IDSUBASTAv;

  IDr C##_USUARIO_ADMIN.PUJA.ID%TYPE;
  ALIASCOMPRADORr C##_USUARIO_ADMIN.PUJA.ALIASCOMPRADOR%TYPE;
  IDSUBASTAr C##_USUARIO_ADMIN.PUJA.IDSUBASTA%TYPE;
  MONTOr C##_USUARIO_ADMIN.PUJA.MONTO%TYPE;
  FECHAHORAr C##_USUARIO_ADMIN.PUJA.FECHAHORA%TYPE;

  BEGIN
    OPEN CHISTORIAL;
      LOOP
        FETCH CHISTORIAL INTO IDr, ALIASCOMPRADORr, IDSUBASTAr, MONTOr, FECHAHORAr;
        EXIT WHEN CHISTORIAL%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(  IDr || ', ' ||
          ALIASCOMPRADORr || ', ' ||
          IDSUBASTAr || ', ' ||
          MONTOr || ', ' ||
          TO_CHAR(FECHAHORAr, 'DD-MONTH-YYYY HH:MI:SS AM'));
      END LOOP;
    CLOSE CHISTORIAL;
  END;

  COMMIT;

  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
END;
/

---------------------------------------------------------
-- Listar historial de PUJA ganadoras para un usuario --
-- •  Para un usuario dado, listar las subastas que ha ganado.
-- •  Entrada: identificador del usuario comprador.
-- •  Salida: listado cronológico de ítemes ganados, precios base, precios finales, comentarios de los usuarios vendedores.

-- Nota:
  -- Estados ESTADOSUBASTA en SUBASTA:
  --
  -- 1: activa
  -- 2: finalizada
  -- 3: completada

CREATE OR REPLACE PROCEDURE PUJASGANADORAS
  (ALIASCOMPRADORv IN VARCHAR2)

IS

BEGIN
  DECLARE CURSOR CGANADORAS IS
    SELECT SUBASTA.IDITEM, SUBASTA.PRECIOINICIAL, SUBASTA.PRECIOACTUAL, SUBASTA.COMENTARIOVENDEDOR
    FROM C##_USUARIO_ADMIN.SUBASTA SUBASTA
    WHERE ALIASCOMPRADORv = SUBASTA.ALIASCOMPRADOR AND SUBASTA.ESTADOSUBASTA > 1;

  IDITEMr C##_USUARIO_ADMIN.SUBASTA.IDITEM%TYPE;
  PRECIOINICIALr C##_USUARIO_ADMIN.SUBASTA.PRECIOINICIAL%TYPE;
  PRECIOACTUALr C##_USUARIO_ADMIN.SUBASTA.PRECIOACTUAL%TYPE;
  COMENTARIOVENDEDORr C##_USUARIO_ADMIN.SUBASTA.COMENTARIOVENDEDOR%TYPE;

  BEGIN
    OPEN CGANADORAS;
      LOOP
        FETCH CGANADORAS INTO IDITEMr, PRECIOINICIALr, PRECIOACTUALr, COMENTARIOVENDEDORr;
        EXIT WHEN CGANADORAS%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(IDITEMr || ', ' || PRECIOINICIALr || ', ' || PRECIOACTUALr || ', ' || COMENTARIOVENDEDORr);
      END LOOP;
    CLOSE CGANADORAS;
  END;

  COMMIT;

  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
END;
/

----------------------------------------
-- Trigger - Registro de mejor oferta --
-- •  Llevar en el registro de una subasta el monto de la mejor oferta y quién la hizo; usar triggers para actualizar dicho monto con cada nueva puja
-- • Usar la función de calendarización de trabajos para revisar cada 5 minutos cuáles subastas han terminado y registrar la oferta ganadora. Indicar bajo qué privilegios de seguridad corre el procedimiento invocado.

CREATE OR REPLACE TRIGGER ACTUALIZARPRECIOACTUAL
AFTER INSERT
  ON C##_USUARIO_ADMIN.PUJA
  FOR EACH ROW

DECLARE
  PRECIOACTUALv NUMBER;
  IDSUBASTAv NUMBER;
  ALIASCOMPRADORv VARCHAR2(30);

BEGIN
  SELECT PUJA.MONTO INTO PRECIOACTUALv
  FROM C##_USUARIO_ADMIN.PUJA PUJA
  WHERE PUJA.ID = (SELECT MAX(PUJA.ID) FROM C##_USUARIO_ADMIN.PUJA);

  SELECT PUJA.ALIASCOMPRADOR INTO ALIASCOMPRADORv
  FROM C##_USUARIO_ADMIN.PUJA PUJA
  WHERE PUJA.ID = (SELECT MAX(PUJA.ID) FROM C##_USUARIO_ADMIN.PUJA);

  SELECT PUJA.IDSUBASTA INTO IDSUBASTAv
  FROM C##_USUARIO_ADMIN.PUJA PUJA
  WHERE PUJA.ID = (SELECT MAX(PUJA.ID) FROM C##_USUARIO_ADMIN.PUJA);
  UPDATE C##_USUARIO_ADMIN.SUBASTA SUBASTA
  SET SUBASTA.PRECIOACTUAL = PRECIOACTUALv,
      SUBASTA.ALIASCOMPRADOR = ALIASCOMPRADORv
  WHERE SUBASTA.ID = IDSUBASTAv;
END;
/



CREATE OR REPLACE PROCEDURE VERIFICAFINALIZA
IS
  FECHAACTUALv DATE;
BEGIN
  SELECT TO_DATE(SYSDATE, 'DD-MONTH-YY HH24:MI:SS') "NOW"
  INTO FECHAACTUALv 
  FROM DUAL;
  
  FOR i IN (SELECT * FROM C##_USUARIO_ADMIN.SUBASTA SUBASTA WHERE SUBASTA.ESTADOSUBASTA = 1 AND SUBASTA.FECHAHORAFIN < FECHAACTUALv)
  LOOP
    UPDATE C##_USUARIO_ADMIN.SUBASTA SUBASTA
    SET SUBASTA.ESTADOSUBASTA = 2 WHERE SUBASTA.ID = i.ID;
  END LOOP;

  COMMIT;

  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
END;
/